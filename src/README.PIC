
 http://eli.thegreenplace.net/2011/11/03/position-independent-code-pic-in-shared-libraries/

 I still don't see how this works!

 If I compile some code to "ref LOT[v]" for my Local Offset Table,
 LOT, I might well know what the address of LOT is and therefore my
 code is really: "ref LOT+v".

 I can rework that as "rel-ref v" which is "ref GOT[v]"

 A second module might also generate "ref LOT[v]".  How do we
 distinguish between the "v"s when the two odules were compiled
 independently?

 Ah, in x86, *every* reference does the "relative-IP' (relative-PC?)
 trick:

; 1. Somehow get the address of the GOT into ebx
lea ebx, ADDR_OF_GOT

; 2. Suppose ADDR_OF_VAR is stored at offset 0x10
;    in the GOT. Then this will place ADDR_OF_VAR
;    into edx.
mov edx, DWORD PTR [ebx + 0x10]

; 3. Finally, access the variable and place its
;    value into edx.
mov edx, DWORD PTR [edx]

 *But* the GOT referenced here is really the LOT we used above.  The
 linker knew the sizes of all code and data segments as so could
 calculate a "GOT" on demand.

 But that means editing the code segment with a segment specific
 "GOT"...

 Hmm, .o might have a placeholder yet .so and .exe might have a fixed
 GOT written.

 Yet!  Internal to any library, references to library variables are in
 its LOT.  However, in C, any *global* variables are marked as
 "extern", that is they will be resolved by the linker at runtime.


 Anyway.  The Scoop of Eli is:

 Variables
 =========
 
 Code Segment:
	ref GOT[v]

 Data Segment:
	GOT[v] => actual addr


 Procedures
 ==========

 Code Segment:
	call PLT[f]

	...

      PLT[0]:
	[prep arguments?]
	call resolver
	jmp result

      PLT[f]:
	jmp GOT[f]
	prep arguments
	jmp PLT[0]

 Data Segment:
	(pass 1)
	GOT[f] => addr of [prep arguments] or PLT[0]?

	(pass 2+)
	GOT[f] => actual addr

