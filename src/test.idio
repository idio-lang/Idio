testfile := "__testfile__"

if (file-exists? testfile) {
  delete-file testfile
}
    ;; (error (string-append "Please delete the file \""
    ;;                       testfile
    ;;                       "\" before running this test.")))

Errors := 0
Tests := 0

define (void) (if #f #f)

define (seq) {
  n := 1

  function () {
    x := n
    set! n (1 + n)
    x
  }
}

define (fail expr result expected) {
  set! Errors (1 + Errors)
  display* "Error #" Errors
  display* "test #" Tests " failed: " expr
  display* "got result:  " result 
  display* "expected:    " expected 
}

define (test3 expr result expected) {
;  (write expr) (display " => ") (write result) (newline)
  set! Tests (1 + Tests)
;  (display "test #") (write Tests) (display ": ") (write expr)(display " => ") (write result) (newline)
  if (not (equal? result expected)) {
    fail expr result expected
  }
}

define-macro (test form result) {
  %T{ test3 '$form $form $result }
}

display* "This is test.idio"

load "tests/s9-test.idio"
load "tests/file-handle.idio"
load "tests/string-handle.idio"
load "tests/handle.idio"
load "tests/struct.idio"
load "tests/condition.idio"
load "tests/dynamic.idio"

if+ (zero? Errors) (display* "All" Tests "tests passed!") \
    else {
      display Errors
      if (gt Errors 1) {
        display " errors."
      } {
	display " error."
      }
      display #\newline
    }

if (file-exists? testfile) (delete-file testfile)
