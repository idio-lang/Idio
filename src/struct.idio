;;
;; Copyright (c) 2015 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; struct.idio
;;


; structures

;; define-struct name & fields
;;
;; NB define-struct cannot use a parent as we cannot (during compile)
;; determine the fields of parent and therefore the correct offsets
;; for our own fields.  Obviously, we cannot corectly generate field
;; accessors for the parents fields (as we don't know what they are).

;; define-struct bar x y
;; struct-type? bar		=> #t
;; struct-type-name bar		=> bar
;; struct-type-parent bar	=> #n
;; struct-type-fields bar	=> (x y)

;; foo := make-bar 1 2
;; bar? foo			=> #t
;; struct-instance? foo		=> #f
;; struct-instance-type foo	=> #ST{0x202ace0}
;; struct-type-name (struct-instance-type foo)	=> bar
;; struct-instance-fields foo	=> (1 2)
;; struct-instance-ref foo a	=> 3
;; bar-x foo			=> 3
;; set-bar-y! foo 10		=> #unspec
;; bar-y foo			=> 10


define-macro (define-struct name & fields) {
  ;; handy parameters
  arg := (gensym)
  val := (gensym)
  field-index := function (field fields) {
    mq := memq field fields
    (length fields) - (length mq)
  }

  make-fname := string->symbol (string-append "make-" (symbol->string name))
  pred-fname := string->symbol (string-append (symbol->string name) "?")

  %T{
      ;; define bar (make-struct-type 'bar #n '(x y))
      define $name (make-struct-type '$name #n '$fields)

      ;; define (make-bar & g/7) {
      ;;   apply make-struct-instance bar g/7
      ;; }
      define ($make-fname & $arg) {
        apply make-struct-instance $name $arg
      }

      ;; define (bar? g/7) {
      ;;   and (struct-instance? g/7) (struct-instance-isa g/7 bar)
      ;; }
      define ($pred-fname $arg) {
        and (struct-instance? $arg) (struct-instance-isa $arg $name)
      }

      ;; define (bar-x g/7) {
      ;;   %struct-instance-ref-direct g/7 bar 'bar-x 0
      ;; }
      ;; define (bar-y g/7) {
      ;;   %struct-instance-ref-direct g/7 bar 'bar-y 1
      ;; }
      $@(map (function (field) {
                get-fname := string->symbol (string-append 
					     (symbol->string name) 
					     "-"
					     (symbol->string field))

                %T{
		  define ($get-fname $arg) {
                    %struct-instance-ref-direct $arg $name '$get-fname $(field-index field fields)
                  } 
                }
              })
	     fields)

      ;; define (set-bar-x! g/7 g/8) {
      ;;   %struct-instance-set-direct g/7 bar 'bar-x 0 g/8
      ;; }
      ;; define (set-bar-y! g/7 g/8) {
      ;;   %struct-instance-set-direct g/7 bar 'bar-y 1 g/8
      ;; }
      $@(map (function (field) {
                set-fname := string->symbol (string-append
					     "set-"
					     (symbol->string name)
					     "-"
					     (symbol->string field)
					     "!")
					  
                %T{
		  define ($set-fname $arg $val) {
                    %struct-instance-set-direct $arg $name '$set-fname $(field-index field fields) $val
                  }
                }
              })
	     fields)
  }
}
