#*

These char-sets are automatically generated from Unicode source files.

*#

; char-set:lower-case is Property Lowercase
char-set:lower-case  = make-sparse-char-set 128 #[ #B{ 128 60:01111111 68-70 11100000 } #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f ]

; char-set:upper-case is Property Uppercase
char-set:upper-case  = make-sparse-char-set 128 #[ #B{ 128 40:01111111 48-50 11100000 } #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f ]

; char-set:title-case is Category Lt
char-set:title-case  = make-sparse-char-set 128 #[ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f ]

; char-set:letter is Property Alphabetic
char-set:letter      = make-sparse-char-set 128 #[ #B{ 128 40:01111111 48-50 11100000 01111111 68-70 11100000 } #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f ]

; char-set:digit is Category Nd
char-set:digit       = make-sparse-char-set 128 #[ #B{ 128 30-30 11000000 } #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f ]

; char-set:letter+digit is Property Alphabetic + Category Nd
char-set:letter+digit = make-sparse-char-set 128 #[ #B{ 128 30-30 11000000 01111111 48-50 11100000 01111111 68-70 11100000 } #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f ]

; char-set:graphic is Category L* + Category N* + Category M* + Category S* + Category P*
char-set:graphic     = make-sparse-char-set 128 #[ #B{ 128 20:01111111 28-70 11111110 } #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f ]

; char-set:printing is char-set:graphic + char-set:whitespace
char-set:printing    = make-sparse-char-set 128 #[ #B{ 128 8:01111100 20-70 11111110 } #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f ]

; char-set:whitespace is Property White_Space
char-set:whitespace  = make-sparse-char-set 128 #[ #B{ 128 8:01111100 20:10000000 } #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f ]

; char-set:iso-control is 0000..001F + 007F..009F
char-set:iso-control = make-sparse-char-set 128 #[ #B{ 128 0-18 78:00000001 } #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f ]

; char-set:punctuation is Category P*
char-set:punctuation = make-sparse-char-set 128 #[ #B{ 128 20:01110111 11101111 38:00110001 10000000 58:00011101 78:00010100 } #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f ]

; char-set:symbol is Category S*
char-set:symbol      = make-sparse-char-set 128 #[ #B{ 128 20:00001000 00010000 38:00001110 58:00000010 10000000 78:00001010 } #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f ]

; char-set:hex-digit is 0030..0039 + 0041..0046 + 0061..0066
char-set:hex-digit   = make-sparse-char-set 128 #[ #B{ 128 30-30 11000000 01111110 60:01111110 } #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f ]

; char-set:blank is Category Zs + 0009
char-set:blank       = make-sparse-char-set 128 #[ #B{ 128 8:01000000 20:10000000 } #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f ]

; char-set:ascii is 0000..007F
char-set:ascii       = make-sparse-char-set 128 #[ #B{ 128 0-78 } #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f ]

; char-set:empty is empty
char-set:empty       = make-sparse-char-set 128 #[ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f ]

; char-set:full is full == ~ empty
char-set:full        = make-sparse-char-set 128 #[ #B{ 128 0-78 } #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f ]

; char-set:nonl is char-set:full excl. #\{newline}
char-set:nonl        = make-sparse-char-set 128 #[ #B{ 128 0-0 11011111 10-78 } #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f ]

; char-set:control is Property Control
char-set:control     = make-sparse-char-set 128 #[ #B{ 128 0-0 11011011 10-18 78:00000001 } #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f ]

; char-set:word-constituent is char-set:letter+digit + _
char-set:word-constituent = make-sparse-char-set 128 #[ #B{ 128 30-30 11000000 01111111 48-50 11100001 01111111 68-70 11100000 } #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f ]

; char-set:cased is char-set:upper-case + char-set:lower-case + char-set:title-case
char-set:cased       = make-sparse-char-set 128 #[ #B{ 128 40:01111111 48-50 11100000 01111111 68-70 11100000 } #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f ]

; %char-set:letter is char-set:letter restricted to ASCII range
%char-set:letter     = make-sparse-char-set 128 #[ #B{ 128 40:01111111 48-50 11100000 01111111 68-70 11100000 } #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f ]

; %char-set:lower-case is char-set:lower-case restricted to ASCII range
%char-set:lower-case = make-sparse-char-set 128 #[ #B{ 128 60:01111111 68-70 11100000 } #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f ]

; %char-set:upper-case is char-set:upper-case restricted to ASCII range
%char-set:upper-case = make-sparse-char-set 128 #[ #B{ 128 40:01111111 48-50 11100000 } #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f ]

; %char-set:digit is char-set:digit restricted to ASCII range
%char-set:digit      = make-sparse-char-set 128 #[ #B{ 128 30-30 11000000 } #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f ]

; %char-set:letter+digit is char-set:letter+digit restricted to ASCII range
%char-set:letter+digit = make-sparse-char-set 128 #[ #B{ 128 30-30 11000000 01111111 48-50 11100000 01111111 68-70 11100000 } #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f ]

; %char-set:punctuation is char-set:punctuation restricted to ASCII range
%char-set:punctuation = make-sparse-char-set 128 #[ #B{ 128 20:01110111 11101111 38:00110001 10000000 58:00011101 78:00010100 } #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f ]

; %char-set:symbol is char-set:symbol restricted to ASCII range
%char-set:symbol     = make-sparse-char-set 128 #[ #B{ 128 20:00001000 00010000 38:00001110 58:00000010 10000000 78:00001010 } #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f ]

; %char-set:graphic is char-set:graphic restricted to ASCII range
%char-set:graphic    = make-sparse-char-set 128 #[ #B{ 128 20:01111111 28-70 11111110 } #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f ]

; %char-set:whitespace is char-set:whitespace restricted to ASCII range
%char-set:whitespace = make-sparse-char-set 128 #[ #B{ 128 8:01111100 20:10000000 } #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f ]

; %char-set:printing is char-set:printing restricted to ASCII range
%char-set:printing   = make-sparse-char-set 128 #[ #B{ 128 8:01111100 20-70 11111110 } #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f ]

; %char-set:iso-control is char-set:iso-control restricted to ASCII range
%char-set:iso-control = make-sparse-char-set 128 #[ #B{ 128 0-18 78:00000001 } #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f ]

; %char-set:word-constituent is char-set:word-constituent restricted to ASCII range
%char-set:word-constituent = make-sparse-char-set 128 #[ #B{ 128 30-30 11000000 01111111 48-50 11100001 01111111 68-70 11100000 } #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f ]

; char-set:regional-indicator is Property Regional_Indicator
char-set:regional-indicator = make-sparse-char-set 128 #[ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f ]

; char-set:extend-or-spacing-mark is Property Extend + Property SpacingMark
char-set:extend-or-spacing-mark = make-sparse-char-set 128 #[ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f ]

; char-set:hangul-l is Property L
char-set:hangul-l    = make-sparse-char-set 128 #[ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f ]

; char-set:hangul-v is Property V
char-set:hangul-v    = make-sparse-char-set 128 #[ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f ]

; char-set:hangul-t is Property T
char-set:hangul-t    = make-sparse-char-set 128 #[ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f ]

; char-set:hangul-lv is Property LV
char-set:hangul-lv   = make-sparse-char-set 128 #[ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f ]

; char-set:hangul-lvt is Property LVT
char-set:hangul-lvt  = make-sparse-char-set 128 #[ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f ]

; Simple uppercase mapping (single character result)
char-set:simple-upper-case-map = #{ (97 & 65)(98 & 66)(99 & 67)(100 & 68)(#\x & #\X)(101 & 69)(102 & 70)(103 & 71)(104 & 72)(105 & 73)(106 & 74)(107 & 75)(108 & 76)(#\u & #\U)(109 & 77)(110 & 78)(111 & 79)(112 & 80)(113 & 81)(114 & 82)(115 & 83)(116 & 84)(#\b & #\B)(117 & 85)(118 & 86)(119 & 87)(120 & 88)(121 & 89)(122 & 90)(#\w & #\W)(#\z & #\Z)(#\y & #\Y)(#\c & #\C)(#\d & #\D)(#\e & #\E)(#\f & #\F)(#\g & #\G)(#\h & #\H)(#\i & #\I)(#\j & #\J)(#\k & #\K)(#\l & #\L)(#\n & #\N)(#\m & #\M)(#\o & #\O)(#\p & #\P)(#\q & #\Q)(#\r & #\R)(#\a & #\A)(#\s & #\S)(#\t & #\T)(#\v & #\V)}

; Simple lowercase mapping (single character result)
char-set:simple-lower-case-map = #{ (65 & 97)(66 & 98)(67 & 99)(68 & 100)(#\X & #\x)(69 & 101)(70 & 102)(71 & 103)(72 & 104)(73 & 105)(74 & 106)(75 & 107)(76 & 108)(#\U & #\u)(77 & 109)(78 & 110)(79 & 111)(80 & 112)(81 & 113)(82 & 114)(83 & 115)(84 & 116)(#\B & #\b)(85 & 117)(86 & 118)(87 & 119)(88 & 120)(89 & 121)(90 & 122)(#\W & #\w)(#\Z & #\z)(#\Y & #\y)(#\C & #\c)(#\D & #\d)(#\E & #\e)(#\F & #\f)(#\G & #\g)(#\H & #\h)(#\I & #\i)(#\J & #\j)(#\K & #\k)(#\L & #\l)(#\N & #\n)(#\M & #\m)(#\O & #\o)(#\P & #\p)(#\Q & #\q)(#\R & #\r)(#\A & #\a)(#\S & #\s)(#\T & #\t)(#\V & #\v)}
