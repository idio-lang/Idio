;;
;; Copyright (c) 2015, 2017, 2020 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; test.idio
;;

;; largely ported from
;;
;; Scheme 9 from Empty Space
;; By Nils M Holm <nmh@t3x.org>, 2007,2008,2009

testfile := "__testfile__"

if (file-exists? testfile) {
  delete-file testfile
}
    ;; (error (string-append "Please delete the file \""
    ;;                       testfile
    ;;                       "\" before running this test.")))

Errors := 0
Tests := 0

define (void) (if #f #f)

define (seq) {
  n := 1

  function () {
    x := n
    set! n (1 + n)
    x
  }
}

define (fail expr result expected) {
  set! Errors (1 + Errors)
  display* "Error #" Errors
  display* "test #" Tests " failed: " expr
  display* "got result:  " result
  display* "expected:    " expected
}

define (test3 expr result expected) {
  set! Tests (1 + Tests)
  if (not (equal? result expected)) {
    ;edisplay* "test #" Tests ":" expr "=>" result
    fail expr result expected
  }
}

define-macro (test form result) {
  #T{ test3 '$form $form $result }
}

;; put the tests dirs on IDIOLIB
testdir := #n

map (function (d) {
       t-p := join-string "/" (reverse (pt (reverse (split-string d "/"))))
       t-d := string-append "/" t-p "/tests"
       r-e := string-append t-d "/test-operator.idio"
       if (file-exists? r-e) {
	 testdir = t-d
       }
}) (split-string IDIOLIB ":")

if (null? testdir) {
  edisplay* "Cannot find 'tests' subdir on IDIOLIB" IDIOLIB
} {
  IDIOLIB = string-append IDIOLIB ":" testdir
}

display* "This is test.idio using IDIOLIB" IDIOLIB

;; put the testing utilities on the PATH
OPATH := PATH
PWD-last := ph (reverse (split-string PWD "/"))
PATH = string-append PATH ":" (string-append PWD "/" (if (equal? PWD-last "src") ".." ".") "/utils/bin")

;; at least one test creates a local file then tries to "load" it --
;; so we need PWD on IDIOLIB
OIDIOLIB := IDIOLIB
IDIOLIB = string-append IDIOLIB ":" PWD

;; running tests under Jenkins means we inherit the agent's max open
;; files (eg. 1048576) which means our file descriptor reaping tests
;; blow up.
nofiles_lim := C/integer-> 256
rl := libc/getrlimit libc/RLIMIT_NOFILE
if (C/> rl.rlim_cur nofiles_lim) {
  rl.rlim_cur = nofiles_lim
  libc/setrlimit libc/RLIMIT_NOFILE rl
}


load "test-read-error.idio"
load "test-read-coverage.idio"
load "test-evaluation-error.idio"

load "test-s9-test.idio"
load "test-operator.idio"
load "test-closure.idio"
load "test-keyword.idio"
load "test-template.idio"
load "test-string.idio"
load "test-array.idio"
load "test-hash.idio"
load "test-file-handle.idio"
load "test-string-handle.idio"
load "test-handle.idio"
load "test-struct.idio"
load "test-condition.idio"
load "test-dynamic.idio"
load "test-computed.idio"
load "test-call-cc.idio"
load "test-env.idio"
load "test-path.idio"
load "test-command.idio"
load "test-libc-wrap.idio"

load "test-load-handle.idio"
load "test-trap.idio"
load "test-utf-8.idio"

;; test that we've seen as many tests as we should have.  How many is
;; that?  Erm, they've not been counted and are dynamic in number so
;; test we've seen at least as many as the largest number we've
;; seen.  Wait, some tests are OS-specific.  Drat!
test (eq? Tests 3294) #t

if (file-exists? testfile) (delete-file testfile)

display* "test.idio completed after " SECONDS "seconds"
display* "# src-props" (length (hash-keys %idio-src-properties))
if (zero? Errors) (display* "All" Tests "tests passed!") \
   {
     display Errors
     if (gt Errors 1) {
       display " errors "
     } {
       display " error "
     }
     display* "in" Tests "tests."
     exit 1
   }

IDIOLIB = OIDIOLIB
PATH = OPATH

