;;
;; Copyright (c) 2020 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; SRFI-0.idio -- a re-imagining thereof
;;

#*

validate & rewrite the cond-expand clauses, {clauses}

The example implementation in SRFI-0 uses syntax-expand and assumes
that we know all possible feature symbols.

Here in Idio we're a bit more flexible about defined feature symbols.
Something more along the lines of STklos.

*#

module SRFI-0
export (
	 cond-expand
)
import posix-regex

#*

The C code has defined *idio-features* (in the Idio module) and a
%add-feature primitive

The C derived features are:

IDIO_DEBUG				if compiled with C macro IDIO_DEBUG enabled

uname/sysname/$sysname			uname(2)
uname/nodename/$nodename		uname(2)
uname/release/$release			uname(2)
uname/machine/$machine			uname(2)

sizeof/pointer/$n			sizeof (void *) * CHAR_BIT

At the bottom of this file we'll add:
Linux
os-release/ID/$ID			os-release(5)
os-release/VERSION_ID/$VERSION_ID	os-release(5)

SunOS:
release/${1st word of /etc/release}	release/OpenIndiana

*#

define (%idio-feature? f) {
  loop :+ function (l) {
	    (cond
	     ((null? l) #f)
	     ((symbol? (ph l)) {
	       ; (x)
	       (or
		(eq? (ph l) f)
		(loop (pt l)))
	     })
    	     ((string? (ph l)) {
	       ; (x)
	       (or
		(equal? (ph l) f)
		(loop (pt l)))
	     }))
  }

  loop *idio-features*
}

define (cond-expand-expander clause*) {
  (cond
   ((null? clause*) {
     #f
     ;error 'cond-expand "no clauses"
   })

   ((not (pair? clause*))
    (error 'cond-expand "bad clauses" clause*))

   ((not (pair? (ph clause*)))
    (error 'cond-expand "bad clause" (ph clause*)))

   (else {
     clause := ph clause*
     
     (cond
      ((eq? 'else (ph clause)) {
	if (null? (pt clause*)) {
	  #T{
	    (begin $@(pt clause))
	  }
	} {
	  ;; Test Case: evaluation-errors/cond-expand-else-not-last.idio

	  ;; cond-expand (else 1) (#t 2)
	  error 'cond-expand "else not in last clause" clause*
	}
      })

      ((pair? (ph clause)) {
	req := ph clause

	(cond
	 ((eq? 'and (ph req)) {
	   if (null? (pt req)) {
	     ;; (cond-expand ((and) body) c*)

	     ;; body
	     #T{
	       (begin $@(pt clause))
	     }
	   } {
	     ;; (cond-expand ((and req1 req2 ...) body) c*)

	     ;; (cond-expand (req1 (cond-expand ((and req2 ...) body) c*)) c*)
	     #T{
	       (cond-expand
		($(pht req)
		 (cond-expand
		  ((and $@(ptt req)) $@(pt clause))
		  $@(pt clause*)))
		$@(pt clause*))
	     }
	   }
	 })

	 ((eq? 'or (ph req)) {
	   if (null? (pt req)) {
	     ;; (cond-expand ((or) body) c*)

	     ;; c*
	     #T{
	       (cond-expand $@(pt clause*))
	     }
	   } {
	     ;; (cond-expand ((or req1 req2 ...) body) c*)

	     ;; (cond-expand (req1 body) (else (cond-expand ((or req2 ...) body) (else c*))))
	     #T{
	       (cond-expand
		($(pht req)
		 (begin $@(pt clause)))
		(else
		 (cond-expand
		  ((or $@(ptt req)) $@(pt clause))
		  $@(pt clause*))))
	     }
	   }
	 })

	 ((eq? 'not (ph req)) {
	   if (or (null? (pt req))
		  (not (null? (ptt req)))) {
		    ;; (cond-expand ((not) body) c*)
		    ;; (cond-expand ((not req1 ...) body) c*)

		    error 'cond-expand "not: bad clause" clause
		  } {
		    ;; (cond-expand ((not req1) body) c*)

		    ;; (cond-expand (req1 (cond-expand c*)) (else body))
		    #T{
		      (cond-expand
		       ($(pht req)
			(cond-expand $@(pt clause*)))
		       (else $@(pt clause)))
		    }
		  }
	 })

	 (else
	  (error 'cond-expand "bad feature requirement" clause)))
      })

      (else {
	;; should be a feature: (cond-expand (FEATURE ...) c*)
	if (%idio-feature? (ph clause)) {
	  #T{
	    (begin $@(pt clause))
	  }
	} {
	  #T{
	    (cond-expand $@(pt clause*))
	  }
	}
      }))
   }))
}

define-template (cond-expand & clause*) {
  cond-expand-expander clause*
}

(cond-expand
 (uname/sysname/Linux {
   loop :+ function (fn*) {
	     if (null? fn*) #n {
	       fn := ph fn*
	       if (file-exists? fn) {
		 fh := open-input-file fn
		 loop :+ function () {
			   if (eof? fh) #n {
			     line := read-line fh
			     (cond
			      ((regexp-matches "^#" line) {
				(loop)
			      })
			      ((regexp-matches "([[:alnum:]_]+)=(.*)" line)
			       => (function (res) {
				     k := array-ref res 1
				     (case k
					   (("ID" "VERSION_ID") {
					     %add-feature (append-string "os-release/" k "/" (array-ref res 2))
					   }))
				     (loop)
			       })))
			     (loop)
			   }
		 }
		 (loop)
	       } {
		 loop (pt fn*)
	       }
	     }
   }

   loop '("/etc/os-release" "/usr/lib/os-release")
 })
 (uname/sysname/SunOS {
   loop :+ function (fn*) {
	     if (null? fn*) #n {
	       fn := ph fn*
	       if (file-exists? fn) {
		 fh := open-input-file fn
		 loop :+ function () {
			   if (eof? fh) #n {
			     line := read-line fh
			     (cond
			      (
				; OpenIndiana Development oi_151.1.8 X86 (powered by illumos)
				; OpenIndiana Hipster 2020.04 (powered by illumos)
				; ...and from the Intertubes...
				; Solaris 9 9/04 s9s_u7wos_09 SPARC
				; Solaris 10 5/08 s10x_u5wos_10 X86
				; Oracle Solaris 11.4 X86
				; OpenSolaris 2009.06 snv_111b X86
				; annoyingly different is:
				; Oracle Solaris 11 Express snv_151a X86
				(regexp-matches "(Solaris|OpenSolaris|OpenIndiana|Oracle) " line)
				=> (function (res) {
				      %add-feature (append-string "release/" (array-ref res 1))
				      ; skip the remaining lines
				}))
			      (else
			       (loop)))
			   }
		 }
		 (loop)
	       } {
		 loop (pt fn*)
	       }
	     }
   }

   loop '("/etc/release")
 }))

provide SRFI-0
