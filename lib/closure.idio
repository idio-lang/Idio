;;
;; Copyright (c) 2015 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; closure.idio
;;

;; SRFI 17 Generalized set!

;; The general meme is:
;;
;;   set! (setter foo) bar
;;
;; which is rewritten as:
;;
;;   (setter setter) foo bar
;;
;; which means that {setter} itself needs a setter whose job is to set
;; the setter of its first argument!
;;
;; NB The canonical implementation of keyword lists uses, um, lists so
;; it doesn't need to do this bootstrap-a-keyword-table mularkey.
{
  ;; bootstrap setter's properties
  setter-kwt := %procedure-properties setter
  if (null? setter-kwt) {
    setter-kwt = (make-keyword-table)
    %set-procedure-properties! setter setter-kwt
  }

  ;; actually set setter's setter
  keyword-set! setter-kwt :setter (function (proc setter) {
    ;;edisplay* 'setter-setter proc setter
    ;; bootstrap proc's properties
    proc-kwt := %procedure-properties proc
    if (null? proc-kwt) {
      proc-kwt = (make-keyword-table)
      %set-procedure-properties! proc proc-kwt
    }

    ;; actually set proc's setter
    keyword-set! proc-kwt :setter setter
  })
}

;; standard setters
set! (setter ph)				set-ph!
set! (setter pt)				set-pt!
set! (setter array-ref)				array-set!
set! (setter string-ref)			string-set!
set! (setter struct-instance-ref)		struct-instance-set!
set! (setter %struct-instance-ref-direct)	%struct-instance-set-direct!

set! (setter value-index)			set-value-index!
