;;
;; Copyright (c) 2015, 2017, 2018, 2020 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; s9.idio
;;

;; ported from
;;
;; Scheme 9 from Empty Space
;; By Nils M Holm <nmh@t3x.org>, 2007,2008,2009
;;

;;----- Library -----

;; Some obvious procedures first

define (phhhh x) (ph (ph (ph (ph x))))
define (phhht x) (ph (ph (ph (pt x))))
define (phhth x) (ph (ph (pt (ph x))))
define (phhtt x) (ph (ph (pt (pt x))))
define (phthh x) (ph (pt (ph (ph x))))
define (phtht x) (ph (pt (ph (pt x))))
define (phtth x) (ph (pt (pt (ph x))))
define (phttt x) (ph (pt (pt (pt x))))
define (pthhh x) (pt (ph (ph (ph x))))
define (pthht x) (pt (ph (ph (pt x))))
define (pthth x) (pt (ph (pt (ph x))))
define (pthtt x) (pt (ph (pt (pt x))))
define (ptthh x) (pt (pt (ph (ph x))))
define (pttht x) (pt (pt (ph (pt x))))
define (pttth x) (pt (pt (pt (ph x))))
define (ptttt x) (pt (pt (pt (pt x))))

define (phhh x) (ph (ph (ph x)))
define (phht x) (ph (ph (pt x)))
define (phth x) (ph (pt (ph x)))
define (phtt x) (ph (pt (pt x)))
define (pthh x) (pt (ph (ph x)))
define (ptht x) (pt (ph (pt x)))
define (ptth x) (pt (pt (ph x)))
define (pttt x) (pt (pt (pt x)))

define (phh x) (ph (ph x))
define (pht x) (ph (pt x))
define (pth x) (pt (ph x))
define (ptt x) (pt (pt x))

define (list & x) x

define (s9/null? x) (eq? #n x)

define (void) (if #f #f)

;; Auxiliary definitions, will be redefined later

; Idio already defines append so to ensure append is this function we
; need a recursive definition

append = {
  %append :+ function (a b) {
    if (null? a) b {
      pair (ph a) (%append (pt a) b)
    }
  }
  %append
}

; There is no LET or LETREC yet, so

define-macro (s9/let bindings expr & exprs) {
  ((function (split)
    ((function (tmp-split) {
       set! split tmp-split
       apply (function (vars args) {
	 append \
	   (list (append (list 'lambda)
			 (append (list vars)
				 (append (list expr)
					 exprs)))) \
	   args
	  }) \
	  split bindings #n #n
       })
      (function (bind* vars args) {
 	 if (null? bind*) {
	   list vars args
	 } {
	   split (pt bind*) \
		 (pair (phh bind*) vars)
		 (pair (pht (ph bind*)) args)
	 }
       })))
   #f)
}

define (map-ph f a) {
  %mapph :+ function (a) {
    if (null? a) {
      '#n
    } {
      pair (f (ph a)) (%mapph (pt a))
    }
  }
  %mapph a
}

define (map f a b) {
  map2 :+ function (a b) {
    if (null? a) {
      '#n
    } {
      pair (f (ph a) (ph b)) (map2 (pt a) (pt b))
    }
  }
  map2 a b
}

define-macro (letrec bindings expr & exprs) {
  append3 := function (a b c) {
    append a (append b c)
  }
  tmps := map-ph (function (x) (gensym)) bindings
  vars := map-ph ph bindings
  args := map-ph pht bindings

  undefineds := map-ph (function (v) (list v #f)) vars
  tmp-bindings := map list tmps args
  updates := map (function (v t) (list 'set! v t)) vars tmps
  list 'let \
       undefineds \
       (append3 '(let)
                (list tmp-bindings)
		(append3 updates
			 (list expr)
			 exprs))
}

;; Library procedures

;; if+ a b c d e
;; =>
;; cond (a b) (c d) (else e)
define-macro (if+ & clauses) {
  loop :+ function (c) {
    cond ((null? c) '#n) \
	 ((not (pair? c)) (error 'if+ "bad syntax")) \
	 ((null? (pt c)) {
	   list 'else (ph c)
	 }) (else {
	   pair (list (ph c) (ph (pt c))) (loop (pt (pt c)))
	 })
  }

  ;;idio-debug "if+ %s\n" (loop clauses)
  #T{ cond $@(loop clauses) }
}

define (display* & x*) {
  p :+ function (x* first) {
    if+ (not (null? x*)) {
      if (not first) (write-char #\space)
      display (ph x*)
      p (pt x*) #f
    }
  }

  p x* #t
  (newline)
}

define (ewrite x) {
  write x (current-error-handle)
}

define (edisplay x) {
  display x (current-error-handle)
}

define (edisplay* & x*) {
  p :+ function (x* first) {
    if+ (not (null? x*)) {
      if (not first) (write-char #\space (current-error-handle))
      edisplay (ph x*)
      p (pt x*) #f
    }
  }

  p x* #t
  newline (current-error-handle)
}

;; Booleans

;define (not x) (eq? #f x)

;; Type predicates

; conflicts with Idio fixnum/bignum
;(define number? real?)

define (port? x) {
  or (input-handle? x) \
     (output-handle? x)
}

;; Equivalence predicates

define (eqv? a b) {
  if+ (number? a) (and (number? b)
		       (== a b)) \
      (char? a)   (and (char? b)
		       (char=? a b)) \
      else        (eq? a b)
}

define (equal? a b) {
  if+ (eq? a b) #t \
      (and (pair? a)
	   (pair? b)) (and (equal? (ph a) (ph b))
			   (equal? (pt a) (pt b))) \
      (string? a) (and (string? b)
		       (string=? a b)) \
      (array? a) (and (array? b)
		       (equal? (array->list a)
			       (array->list b))) \
      else	  (eqv? a b)
}

;; List procedures

define (list? x) {
  l? :+ function (x y) {
    if+ (eq? x y) #f \
	(null? x) #t \
	(pair? x) (or (null? (pt x))
		      (and (pair? (pt x))
			   (l? (ptt x) (pt y)))) \
        else #f
    }

  or (null? x) \
     (and (pair? x)
	  (l? (pt x) x))
}

define (assoc x a) {
  if+ (null? a) #f \
      (equal? (phh a) x) (ph a) \
      else (assoc x (pt a))
}

define (assq x a) {
  if+ (null? a) #f \
      (eq? (phh a) x) (ph a) \
      else (assq x (pt a))
}

define (assv x a) {
  if+ (null? a) #f \
      (eqv? (phh a) x) (ph a) \
      else (assv x (pt a))
}

define (member x a) {
  if+ (null? a) #f \
      (equal? (ph a) x) a \
      else (member x (pt a))
}

define (s9/memq x a) {
  if+ (null? a) #f \
      (eq? (ph a) x) a \
      else (memq x (pt a))
}

define (memv x a) {
  if+ (null? a) #f \
      (eqv? (ph a) x) a \
      else (memv x (pt a))
}

define (s9/reverse a) {
  reverse2 :+ function (a b) {
    if (null? a) b {
      reverse2 (pt a) (pair (ph a) b)
    }
  }
  reverse2 a '#n
}

; Auxiliary functions for FOLD-LEFT, FOLD-RIGHT, MAP

define (map-ph f a) {
  mapph1 :+ function (a r) {
    if (null? a) {
      reverse r
    } {
      mapph1 (pt a) (pair (f (ph a)) r)
    }
  }

  mapph1 a '#n
}

ph-of := {
  map-ph := map-ph

  function (a*) {
    map-ph ph a*
  }
}

pt-of := {
  map-ph := map-ph

  function (a*) {
    map-ph pt a*
  }
}

any-null? := {
  map-ph := map-ph

  function (a*) {
    and (memq #t (map-ph null? a*)) \
	#t
  }
}

fold-left := {
  ph-of := ph-of
  pt-of := pt-of
  any-null? := any-null?

  function (f b & a*) {
    fold :+ function (a* r) {
      if (any-null? a*) r {
        fold (pt-of a*) (apply f r (ph-of a*))
      }
    }

    if (null? a*) {
      error 'fold-left "too few arguments"
    } {
      fold a* b
    }
  }
}

fold-right := {
  ph-of := ph-of
  pt-of := pt-of
  any-null? := any-null?
  map-ph := map-ph

  function (f b & a*) {
    foldr :+ function (a* r) {
      if (any-null? a*) r {
         foldr (pt-of a*) (apply f (append (ph-of a*)
					    (list r)))
      }
    }

    if (null? a*) {
      error 'fold-right "too few arguments"
    } {
      foldr (map-ph reverse a*) b
    }
  }
}

append := {
  fold-left := fold-left

  function a {
    append2 :+ function (a b) {
      if (null? a) b {
        append2 (pt a) (pair (ph a) b)
      }
    }
    append-wrapper :+ function (a b) {
      if (null? b) a {
        append2 (reverse a) b
      }
    }

    fold-left append-wrapper '#n a
  }
}

define (s9/length x) {
  length2 :+ function (x r) {
    if (null? x) r {
      length2 (pt x) (+ r 1)
    }
  }

  length2 x 0
}

define (list-tail x n) {
  if+ (zero? n) x \
      (null? x) (error 'list-tail "index out of range" n) \
      else (list-tail (pt x) (- n 1))
}

define (list-ref x n) {
  ph (list-tail x n)
}

map := {
  ph-of := ph-of
  pt-of := pt-of
  any-null? := any-null?

  function (f & a*) {
    map2 :+ function (a* r) {
      if (null? (ph a*)) {
        reverse r
      } {
	map2 (pt-of a*) (pair (apply f (ph-of a*))
			       r)
      }
    }

    if (null? a*) {
      error 'map "too few arguments"
    } {
      map2 a* '#n
    }
  }
}

define (for-each f & a*) {
  if (null? a*) {
    error 'for-each "too few arguments"
  } {
    apply map f a*
  }
  (void)
}

;; Arithmetic procedures

define (abs x) (if (lt x 0) (- x) x)

define (even? x) (zero? (remainder x 2))

define (expt x y) {
  square :+ function (x) (* x x)
  expt2 :+ function (x y) {
    if+ (zero? y) 1 \
	(even? y) (square (expt2 x (quotient y 2))) \
	else      (x * (square (expt2 x (quotient y 2))))
  }

  if+ (negative? y) {
        / (expt2 (0.0 + x) y)
      } (integer? y) {
        expt2 x y
      } else (exp (y * (log x)))
}

gcd := {
  fold-left := fold-left

  function a {
    gcd2 :+ function (a b) {
      if+ (zero? b) a \
	  (zero? a) b \
	  (lt a b) (gcd2 a (remainder b a)) \
	  else (gcd2 b (remainder a b))
    }

    fold-left gcd2 0 (map abs a)
  }
}

lcm := {
  fold-left := fold-left

  function a {
    lcm2 :+ function (a b) {
      cd := (gcd a b)

      * cd (* (quotient a cd)
                        (quotient b cd))
    }

    fold-left lcm2 1 (map abs a)
  }
}

max := {
  fold-left := fold-left

  function (a & b) {
    fold-left (function (a b) {
      if (or (inexact? a) (inexact? b)) {
        exact->inexact (if (gt a b) a b)
      } {
        if (gt a b) a b
      }
    }) a b
  }
}

min := {
  fold-left := fold-left

  function (a & b) {
    fold-left (function (a b) {
      if (or (inexact? a) (inexact? b)) {
        exact->inexact (if (lt a b) a b)
      } {
	if (lt a b) a b
      }
    }) a b
  }
}

define (modulo a b) {
  rem := remainder a b

  if+ (zero? rem) 0 \
      (eq? (negative? a) (negative? b)) rem \
      else (+ b rem)
}

define (negative? x) (lt x 0)

define (odd? x) (not (even? x))

define (positive? x) (gt x 0)

define (ceiling x) (- (floor (- x)))

define (round x) {
  x+ := 0.5 + x
  rx := floor x+

  if (and (odd? (inexact->exact rx))
	  (== x+ rx)) {
    rx - 1
  } rx
}

define (truncate x) {
  (if (lt x 0) ceiling floor) x
}

; used by EXP and SIN
define (fact2 x r) {
  if (== x 0) r {
    fact2 (x - 1) (x * r)
  }
}

exp := {
  fact2 := fact2

  function (x) {
    e-series :+ function (x y r last) {
      if (== r last) r {
        e-series x \
		 (1 + y) \
		 (r + ((expt x y) /
		       (fact2 y 1))) \
		 r
      }
    }

    if (ge x 2.0) {
      e^x/2 := 1 + (x / 2) + (e-series (x / 2)
				       2
				       0.0
				       1.0)

      e^x/2 * e^x/2
    } {
      1 + x + (e-series x
			2
			0.0
			1.0)
    }
  }
}

define (log x) {
  l-series :+ function (x y r last lim) {
    if+ (and lim (zero? lim)) r \
	(== r last) (2 * r) \
	else (l-series x
		       (2 + y)
		       (r + ((expt ((x - 1) /
				    (x + 1))
                                         y) /
				   y)) \
		       r
		       (if lim (lim - 1) lim))
    }

    if+ (negative? x) (1.0 / 0) \
        (lt 0.1 x 5) (l-series x
			      1
			      0.0
			      1.0
			      #f) \
        else {
          approx := l-series x 1 0.0 1.0 5
          a := x / (exp approx)
          approx + (log a)
        }
}

; auxilary definitions for SIN, COS, TAN
pi := 3.141592653589793238462643383279502884197169399375105820974944
pi/4 := pi / 4
pi/2 := pi / 2
3pi/4 := pi/2 + pi/4
3pi/2 := pi + pi/2
5pi/4 := pi + pi/4
7pi/4 := pi + 3pi/4
2pi := pi + pi

->circle := {
  2pi := 2pi

  function (x) {
    x+ := abs x
    d := 2pi * (floor (x+ / 2pi))
    x+ = x+ - d
    if (negative? x) {
      2pi - x+
    } {
      x+
    }
  }
}

p-series  := {
  fact2 := fact2

  function (x y r add last) {
    if (== r last) r {
      p-series x \
	       (2 + y) \
	       ((if add \+ \-) r ((expt x y) / (fact2 y 1))) \
	       (not add) \
	       r
    }
  }
}

cos := {
  ->circle := ->circle
  p-series := p-series
  pi := pi
  pi/2 := pi/2
  3pi/2 := 3pi/2
  2pi := 2pi

  function (x) {
    x := ->circle x

    if+ (== 0     x)       (if (inexact? x)  #i1.0  1.0) \
        (== pi/2  x)       (if (inexact? x)  #i0.0  0.0) \
	(== pi    x)       (if (inexact? x) #i-1.0 -1.0) \
	(== 3pi/2 x)       (if (inexact? x)  #i0.0  0.0) \
	(le 0    x pi/2)  (p-series    x         2 1.0 #f 0) \
	(le pi/2 x pi)    (- (p-series (- pi x)  2 1.0 #f 0)) \
	(le pi   x 3pi/2) (- (p-series (- x pi)  2 1.0 #f 0)) \
	else              (p-series    (- 2pi x) 2 1.0 #f 0)
  }
}

sin := {
  ->circle := ->circle
  p-series := p-series
  pi := pi
  pi/2 := pi/2
  3pi/2 := 3pi/2
  2pi := 2pi

  function (x) {
    x := ->circle x

    if+ (== 0     x) (if (inexact? x)  #i0.0  0.0) \
        (== pi/2  x) (if (inexact? x)  #i1.0  1.0) \
	(== pi    x) (if (inexact? x)  #i0.0  0.0) \
	(== 3pi/2 x) (if (inexact? x) #i-1.0 -1.0) \
	else {
	  z := if+ (le 0    x  pi/2) x \
	           (le pi/2 x  pi)   (- pi x) \
		   (le pi   x 3pi/2) (- x pi) \
		   else              (- 2pi x)

	  if (gt x pi) {
	    - (p-series z 3 z #f 0)
          } {
	    p-series z 3 z #f 0
          }
        }
  }
}

tan := {
  ->circle := ->circle
  pi := pi
  pi/4 := pi/4
  3pi/4 := 3pi/4
  5pi/4 := 5pi/4
  7pi/4 := 7pi/4

  function (x) {
    x := ->circle x
    if+ (or (== x 0)     (== x  pi))   (if (inexact? x)  #i0.0  0.0) \
        (or (== x  pi/4) (== x 5pi/4)) (if (inexact? x)  #i1.0  1.0) \
	(or (== x 3pi/4) (== x 7pi/4)) (if (inexact? x) #i-1.0 -1.0) \
	else                         ((sin x) / (cos x))
  }
}

atan := {
  pi/2 := pi/2
  at-series :+ function (x y r last) {
    if (== r last) r {
      at-series x \
		(1 + y) \
		(r + ((((expt 2 (y + y)) * (expt (fact2 y 1) 2)) /
		       (fact2 (y + y + 1) 1)) *
		       ((expt x (y + y + 1)) /
			(expt (1 + (x * x)) (1 + y))))) \
		r
    }
  }

  function (x) {
    if+ (negative? x) (- (at-series (- x) 0.0 0 1)) \
	(gt x 1) (pi/2 - (atan (/ x))) \
	else (at-series x 0.0 0 1)
  }
}

define (asin x) {
  if+ (== 1 x) (2 * (atan x)) \
      (negative? x) (- (asin (- x))) \
      else (atan (x / (sqrt (1 - (x * x)))))
}

acos := {
  pi := pi
  pi/2 := pi/2

  function (x) {
    if+ (== -1 x) pi \
	(==  1 x) 0 \
	else (pi/2 - (asin x))
  }
}

define (sqrt square) {
  sqrt2 :+ function (x last) {
    if (== last x) x {
      sqrt2 ((x + (square / x)) / 2) x
    }
  }

  if (negative? square) {
    error 'sqrt "negative argument" square
  } {
    rt := sqrt2 square 0
    if (== square (* rt rt)) {
      inexact->exact rt
    } rt
  }
}

define (zero? x) (== 0 x)

;; String procedures

define (string & x) (list->string x)

; Used by NUMBER->STRING and STRING->NUMBER
define (number-of-digits n r) {
  if (zero? n) {
    if (zero? r) 1 r
  } {
    number-of-digits (quotient n 10) (1 + r)
  }
}

define number->string {
  number-of-digits := number-of-digits

  function (n & radix) {
    digits :+ list->array (string->list "0123456789abcdefghijklmnopqrstuvwxyz")
    conv :+ function (n rdx res) {
      if (zero? n) {
        if (null? res) '(#\0) res
      } {
	conv (quotient n rdx) \
	     rdx \
	     (pair (array-ref digits (remainder n rdx))
		   res)
      }
    }
    conv-int :+ function (n rdx) {
      if (negative? n) {
        list->string (pair #\- (conv (abs n) rdx '#n))
      } {
	list->string (conv n rdx '#n)
      }
    }
    conv-sci-real :+ function (m e) {
      ms := conv-int m 10
      es := conv-int e 10
      i := if (negative? m) 2 1
      k := string-length ms
      string-append (substring ms 0 i) \
		    "." \
		    (if (== k i) "0" (substring ms i k)) \
		    "e" \
		    (if (le 0 e) "+" "") \
		    es
    }
    zeroes :+ function (n) {
      loop :+ function (n z) {
        if (positive? n) {
          loop (- n 1) (pair #\0 z)
        } {
	  list->string z
        }
      }
      loop n '#n
    }
    conv-expanded-real :+ function (n offset) {
      m := abs n
      string-append (if (negative? n) "-" "") \
		    (if+ (negative? offset) "0."
			 (zero? offset)     "0"
			 else               "") \
		    (zeroes (- offset)) \
		    {
		      ms := conv-int m 10
		      k := string-length ms
		      if (le 0 offset k){
                        string-append (substring ms 0 offset) \
				      "." \
				      (substring ms offset k)
                      } {
			ms
                      }
                    }
    }
    conv-real :+ function (n) {
      m := mantissa n
      e := exponent n
      d := number-of-digits m 0

      if (lt -4 (+ e d) 10) {
        conv-expanded-real m (e + d)
      } {
	conv-sci-real m (e + d + -1)
      }
    }
    get-radix :+ function () {
      if+ (null? radix) 10 \
	  (le 2 (ph radix) 36) (ph radix) \
	  else (error 'number->string "invalid radix"
                                (ph radix))
    }

    r := (get-radix)
    if+ (not (or (integer? n) (== 10 r))) \
          (error 'number->string "real number needs a radix of 10" n) \
	(integer? n) (conv-int (inexact->exact n) r) \
	else (conv-real n)
  }
}

string->number := {
  number-of-digits := number-of-digits
  inexact := #f

  function (str & radix) {
    digits :+ string->list "0123456789abcdefghijklmnopqrstuvwxyz"
    value-of-digit :+ function (x) {
      v :+ function (x d n) {
        if+ (null? d) 36 \
	    (char=? (ph d) x) n \
	    else (v x (pt d) (n + 1))
      }
      v (char-downcase x) digits 0
    }
    find-exponent-mark :+ function (c) {
      memv c '(#\d #\D #\e #\E #\f #\F #\l #\L #\s #\S)
    }
    result :+ pair
    value :+ ph
    rest :+ pt
    FAIL :+ '(#f & #f)
    failed? :+ function (res) (eq? #f (pt res))
    ok? :+ function (res) (not (eq? #f (pt res)))
    conv3 :+ function (lst val rdx) {
      if (null? lst) {
        result val '#n
      } {
	dval := value-of-digit (ph lst)
	if (lt dval rdx) {
          conv3 (pt lst) \
		((value-of-digit (ph lst)) + (val * rdx)) \
		rdx
        } {
	  result val lst
        }
      }
    }
    conv :+ function (lst rdx) {
      if (null? lst) FAIL {
        conv3 lst 0 rdx
      }
    }
    conv-int :+ function (lst rdx) {
      if+ (null? lst) FAIL \
	  (char=? (ph lst) #\+) (conv (pt lst) rdx) \
	  (char=? (ph lst) #\-) {
            r := conv (pt lst) rdx
	    if (ok? r) {
              result (- (value r)) (rest r)
            } FAIL
          } \
	  else (conv lst rdx)
    }
    make-frag :+ function (x) {
      d := number-of-digits x -1
      (x / (expt 10.0 d)) - 1.0
    }
    make-real :+ function (int frag expn) {
      v := (0.0 + (abs int) + (make-frag frag)) * (expt 10.0 expn)
      if (negative? int) (- v) v
    }
    conv-exponent :+ function (int frag lst) {
      if (null? lst) FAIL {
        exp-part := conv-int lst 10
	if (failed? exp-part) FAIL {
          result (make-real int frag (value exp-part)) (rest exp-part)
        }
      }
    }
    conv-decimals :+ function (int lst) {
      if+ (null? lst) (result (0.0 + int) '#n) \
	  (find-exponent-mark (ph lst)) (conv-exponent int 10 (pt lst)) \
	  else {
            frag-part := conv3 lst 1 10
	    if (null? (rest frag-part)) {
              result (make-real int (value frag-part) 0) '#n
            } {
	      conv-exponent int (value frag-part) (pt (rest frag-part))
            }
          }
    }
    radix-ten? :+ function (rdx) {
      if (not (== 10 rdx)) {
        if (null? radix) #f (error 'string->number "real number needs a radix of 10")
      } #t
    }
    mantissa-digits? :+ function (x) {
      if+ (null? x)                    #f \
	  (char-numeric? (ph x))      #t \
	  (find-exponent-mark (ph x)) #f \
	  else (mantissa-digits? (pt x))
    }
    conv-real :+ function (lst rdx) {
      int-part := conv-int lst rdx
      if+ (failed? int-part) FAIL \
          (and (zero? (value int-part))
	       (not (mantissa-digits? lst))) FAIL \
	  (null? (rest int-part)) int-part \
	  (find-exponent-mark (ph (rest int-part))) {
            if (radix-ten? rdx) {
              conv-exponent (value int-part) \
			    10 \
			    (pt (rest int-part))
            } FAIL
	  } \
	  (char=? #\. (ph (rest int-part))) {
            if (radix-ten? rdx) {
              conv-decimals (value int-part) (pt (rest int-part))
            } FAIL
          } \
	  else int-part
    }
    replace-inexact-digits! :+ function (a) {
      if+ (null? a) #f \
	  (char=? #\# (ph a)) {
            set-ph! a #\5
            set! inexact #t
            replace-inexact-digits! (pt a)
          } \
	  else (replace-inexact-digits! (pt a))
    }
    get-radix :+ function () {
      if+ (null? radix) 10 \
	  (le 2 (ph radix) 36) (ph radix) \
	  else (error 'string->number "invalid radix" (ph radix))
    }

    set! inexact #f
    radix :+ (get-radix)
    lst :+ string->list str

    if (and (gt (string-length str) 1)
	    (char=? #\# (ph lst))) {
      mod := pht lst
      set! lst (ptt lst)
      if+ (char=? mod #\e) (void) \
          (char=? mod #\d) (void) \
	  (char=? mod #\i) (set! inexact #t) \
	  (char=? mod #\b) (set! radix 2) \
	  (char=? mod #\o) (set! radix 8) \
	  (char=? mod #\x) (set! radix 16) \
	  else             (set! lst '#n)
    }
    if (or (null? lst)
	   (memv (ph lst) '(#\+ #\- #\.))
	   (char-numeric? (ph lst))) {
      replace-inexact-digits! lst
    }

    r := if+ (null? lst) FAIL \
             (char=? #\- (ph lst)) (conv-real (pt lst) radix) \
	     else (conv-real lst radix)

    if (null? (rest r)) {
      v := if (char=? #\- (ph lst)) {
        - (value r)
      } {
	value r
      }
      if inexact (exact->inexact v) v
    } #f
  }
}

;; Array procedures

define (array & x) (list->array x)

;; Input/output procedures

define (newline & port) (apply write-char #\newline port)

define (call-with-input-file file proc) {
  f := open-input-file file
  r := proc f
  close-input-handle f
  r
}

define (call-with-output-file file proc) {
  f := open-output-file file
  r := proc f
  close-output-handle f
  r
}

with-input-from-file := {
  set-input-handle! := set-input-handle!

  function (file thunk) {
    outer-handle := (current-input-handle)
    new-handle := open-input-file file
    set-input-handle! new-handle
    input := (thunk)
    close-input-handle new-handle
    set-input-handle! outer-handle
    input
  }
}

with-output-to-file := {
  set-output-handle! := set-output-handle!

  function (file thunk) {
    outer-handle := (current-output-handle)
    new-handle := open-output-file file
    set-output-handle! new-handle
    (thunk)
    close-output-handle new-handle
    set-output-handle! outer-handle
  }
}

;;----- Quasi-quote-expander -----

define-macro (s9/quasiquote) \
  function (form) {
    qq-pair :+ function (a b) {
      if+ (and (pair? a)
	       (eq? 'unquote-splicing (ph a))) {
            if (and (pair? b)
		    (eq? 'quote (ph b))
		    (null? (pht b))) {
              pht a
            } {
	      list 'append (pht a) b
            }
          } \
          else (list 'pair a b)
    }
    qq-expand :+ function (x) {
      if+ (array? x) (list 'list->array (qq-expand (array->list x))) \
	  (not (pair? x)) (list 'quote x) \
	  (and (eq? 'unquote (ph x))
	       (pair? (pt x))) (pht x) \
	  (and (eq? 'unquote-splicing (ph x))
	       (pair? (pt x))) (list 'unquote-splicing (pht x)) \
	  (and (eq? 'quasiquote (ph x))
	       (pair? (pt x))) (error 'quasiquote "may not be nested") \
	  else (qq-pair (qq-expand (ph x))
			(qq-expand (pt x)))
    }

    qq-expand form
  }


;;----- Library -----

; LET/LET*/LETREC helper
define (check-bindings b who) {
  if+ (null? b) #t \
      (or (not (pair? b))
	  (not (pair? (ph b)))
	  (not (symbol? (phh b)))
	  (not (pair? (pth b)))
	  (not (null? (ptth b)))) (error 'check-bindings (string-append who ": invalid syntax") b) \
      else (check-bindings (pt b) who)
}

; Now that the QQ expander is here, define a
; clean version of LET (including named LET).
; Can't name it LET yet, because it uses LET.
define-macro %ext-let {
  check-bindings := check-bindings

  function (a1 a2 & a3) {
    split :+ function (bind* vars args) {
      if (null? bind*) {
        pair vars args
      } {
	split (pt bind*) \
	      (pair (phh bind*) vars) \
	      (pair (phth bind*) args)
      }
    }

    if (symbol? a1) {
      if (null? a3) {
        error 'named-let "missing body" #T{ let $a1 $a2 $@a3 }
      } {
	 check-bindings a2 "let"
         va := split a2 '#n '#n
	 v := reverse (ph va)
	 a := reverse (pt va)
	 #T{
	     {
	       $a1 :+ function $v $@a3
	       $a1 $@a
	     }
	   }
      }
    } {
      check-bindings a1 "let"
      va := split a1 '#n '#n
      v := ph va
      a := pt va
      #T{ (function $v $a2 $@a3) $@a }
    }
  }
}

define-macro let %ext-let

; Also define a clean version of LETREC.

define-macro %clean-letrec {
  check-bindings := check-bindings

  function (bindings expr & exprs) {
    check-bindings bindings "letrec"
    tmps := map (function (x) (gensym)) bindings
    vars := map ph bindings
    args := map pht bindings

    undefineds := map (function (v) (list v #f)) vars
    tmp-bindings := map (function (t a) (list t a)) tmps args
    updates := map (function (v t) (list 'set! v t)) vars tmps
    #T{ let $undefineds (let $tmp-bindings
    	    		     $@updates
			     $expr
			     $@exprs) }
  }
}

define-macro letrec %clean-letrec

define-macro let* {
  check-bindings := check-bindings

  function (bindings expr & exprs) {
    nest-let :+ function (b) {
      if+ (null? b) (pair expr exprs) \
	  (null? (pt b)) #T{
			     {
			       $(phh b) := $(phth b)
			       $@(nest-let (pt b))
			     }
			 } \
          else #T{
		   {
		     $(phh b) := $(phth b)
		     $(nest-let (pt b))
		   }
	       }
    }

    check-bindings bindings "let*"
    if (null? bindings) {
      #T{
	  {
	    $expr
	    $@exprs
	  }
      }
    } {
      nest-let bindings
    }
  }
}

define-macro (case key & clauses) {
  gen-clauses :+ function (k c*) {
    if+ (null? c*) '#n \
	(or (not (pair? c*))
	    (not (pair? (ph c*)))
	    (not (pair? (pth c*)))) (error 'case "invalid syntax" c*) \
	(null? (pt c*)) {
          if (eq? 'else (phh c*)) {
	    #T{ ((else $@(pth c*))) }
	  } {
	    #T{ (((memv $k '$(phh c*)) $@(pth c*))) }
	  }
        } \
	else {
	  #T{ (((memv $k '$(phh c*)) $@(pth c*)) $@(gen-clauses k (pt c*))) }
	}

  }

  k := (gensym)
  #T{
      {
        $k := $key
	cond $@(gen-clauses k clauses)
      }
  }
}

define-macro (do var-clauses test & body) {
  split :+ function (clauses vars inits steps) {
    if+ (null? clauses) (list vars inits steps) \
	(or (not (pair? clauses))
	    (not (pair? (ph clauses)))
	    (not (symbol? (phh clauses)))
	    (not (pair? (pth clauses)))) (error 'do "invalid syntax" clauses) \
	else (split (pt clauses)
		    (pair (phh clauses) vars)
		    (pair (phth clauses) inits)
		    (if (null? (ptth clauses))
			(pair (phh clauses) steps)
			(pair (phtth clauses) steps)))
  }

  if (or (not (pair? test))
	 (not (list? (pt test)))) {
    error 'do "invalid syntax" test
  } {
    loop := (gensym)
    var+init+step := split var-clauses '#n '#n '#n
    v := ph var+init+step
    i := pht var+init+step
    s := phtt var+init+step

    #T{
        {
	  $loop :+ function $v {
            if $(ph test) {
              $@(pt test)
	    } {
	      $@body
	      ($loop $@s)
	    }
	  }
	  $loop $@i
	}
    }
  }
}

define-macro (delay expr) {
  #T{
      {
        value := #f
	function () {
          if value {
            ph value
	  } {
	    x := $expr
	    if value {
              ph value
	    } {
	      value = pair x '#n
	      ph value
	    }
	  }
        }
      }
  }
}

define (force x) (x)

;;----- Syntax-rules-transformer -----

; This expander rewrites DEFINE-SYNTAX to DEFINE-MACRO, e.g.:
;
; (define-syntax iff
;   (syntax-rules (then else)
;     ((_ p then c)        (or p c))
;     ((_ p then c else a) (if p c a))))
; ==>
; (define-macro (iff & g283)
;   ((function (syntax-expand syntax-match g283)
;      (cond ((syntax-match g283 '(_ p then c) '(then else) '())
;              => (function (env)
;                   (syntax-expand '(_ p then c) '(or p c) env)))
;            ((syntax-match g283 '(_ p then c else a) '(then else) '())
;              => (function (env)
;                   (syntax-expand '(_ p then c else a) '(if p c a) env)))
;            (else
;              (error "invalid syntax" g283))))
;    #<PROCEDURE syntax-expand>
;    #<PROCEDURE syntax-match>
;    (pair 'iff g283)))

; Match FORM against PATTERN.
; KEYWORDS contains the keywords of SYNTAX-RULES.
; When the given form matches the pattern, bind
; each variable of PATTERN to the corresponding
; part of the FORM, extend ENV by these bondings
; and return it.
; In case of a mismatch, return #F.
;
; NOTE: The ellipsis is an ordinary variable, but
; it binds to an environment rather than a form.
;
define (syntax-match form pattern keywords env) {
  match :+ function (form pattern keywords env) {
    if+ (pair? pattern) {
          if+ (and (pair? (pt pattern)) \
		   (eq? '... (pht pattern))) {
                e* := map (function (x)
			    (match x (ph pattern) keywords '#n)) \
		      form
		pair (pair '... e*) env
              } \
	      (pair? form) {
                e := match (ph form) (ph pattern) keywords env
		and e \
		    (match (pt form) (pt pattern) keywords e)
              } \
              else #f
        } \
        (memq pattern keywords) {
          if (eq? pattern form) env #f
        } \
	(symbol? pattern) {
          pair (pair pattern form) env
        } \
        else {
          if (equal? pattern form) env #f
        }
  }

  e := match form pattern keywords env
  if e (reverse e) e
}

; Give a unique name to each variable that is bound in FORM.
; BOUND is a list of initially bound variables. This function
; also renames variables of LET, LET*, and LETREC, e.g.:
;
; (ALPHA-CONV '(LET ((X Y)) X) '()) => (LET ((G0 Y)) G0)
;
define (alpha-conv form bound) {
  subst :+ function (x env) {
    cond ((assq x env) => pt) \
	 (else x)
  }
  map-improper :+ function (f a r) {
    if+ (null? a) (reverse r) \
	(not (pair? a)) (append (reverse r) (f a)) \
	else (map-improper f (pt a) (pair (f (ph a)) r))
  }
  remove-bound :+ function (env bound) {
    if+ (null? env) '#n \
	(memq (phh env) bound) (remove-bound (pt env) bound) \
	else (pair (ph env) (remove-bound (pt env) bound))
  }
  conv :+ function (form env) {
    if+ (symbol? form) (subst form env) \
	(not (pair? form)) form \
	(and (eq? 'quote (ph form)) \
	     (pair? (pt form)) \
	     (null? (ptt form))) form \
	(and (eq? 'function (ph form)) \
	     (pair? (pt form)) \
	     (pair? (ptt form))) {
	  e := map-improper (function (x)
			      (pair x (gensym))) \
			    (pht form) \
			    '#n

	  #T{ (function $@(conv (pt form)
				(append (remove-bound e bound)
					env))) }
        } \
	(and (or (eq? (ph form) 'let) \
		 (eq? (ph form) 'letrec) \
		 (eq? (ph form) 'let*)) \
	     (pair? (pt form)) \
	     (pair? (pht form)) \
	     (pair? (phht form)) \
	     (pair? (ptt form))) {
	e := map-improper (function (x)
			    (pair x (gensym))) \
			  (map (function (x)
				 (if (pair? x) (ph x) #f))
			       (pht form)) \
			  '#n

        #T{ ($(ph form) $@(conv (pt form)
				(append (remove-bound e bound)
					env))) }
        } \
	else (map-improper (function (x) (conv x env))
			   form
			   '#n)
  }

  conv form '#n
}

; Substitute variables of FORM by values of ENV.
;
define (syntax-expand bound tmpl env) {
  alpha-conv := alpha-conv
  expand :+ function (tmpl env) {
    if+ (not (pair? tmpl)) {
      cond ((assq tmpl env) => pt) \
	    (else tmpl)
        } \
	(and (pair? tmpl) \
	     (pair? (pt tmpl)) \
	     (eq? (pht tmpl) '...)) {
	  eenv := assq '... env

	  if (not eenv) {
	    error 'syntax-rules "template without matching ... in pattern" tmpl
          } {
	    set-ph! eenv '(#f)
            map (function (x)
		  (expand (ph tmpl) x)) \
	        (pt eenv)
          }
        } \
	else {
	  pair (expand (ph tmpl) env) \
	       (expand (pt tmpl) env)
	}
  }

  alpha-conv (expand tmpl env) bound
}

; Check the syntax of DEFINE-SYNTAX and rewrite it
; to an application of DEFINE-MACRO.
;
define-macro define-syntax {
  flatten :+ function (x r) {
    if+ (null? x) r \
	(pair? x) (flatten (ph x)
			   (flatten (pt x) r)) \
        else (pair x r)
  }
  list-of? :+ function (p a) {
      or (null? a) \
	 (and (p (ph a)) \
	      (list-of? p (pt a)))
  }
  keywords-ok? :+ function (x) {
    list-of? symbol? x
  }
  rules-ok? :+ function (x) {
    list-of? (function (x)
	       (and (pair? x) \
		    (pair? (ph x)) \
		    (pair? (pt x)) \
		    (null? (ptt x)))) \
	     x
  }
  pattern := phh
  template := phth
  rewrite-rules :+ function (app keywords rules-in rules-out) {
    if (null? rules-in) {
      reverse rules-out
    } {
      rewrite-rules app \
		    keywords \
		    (pt rules-in) \
		    (pair #T{ ((syntax-match $app
					     '$(pattern rules-in)
					     '$keywords
					     '#n)
			       => (function (env)
					    (syntax-expand '$(flatten (pattern rules-in) '#n)
							   '$(template rules-in)
							   env))) }
			  rules-out)
    }
  }

  function (name rules) {
    if+ (not (symbol? name)) (error 'define-syntax "expected symbol" name) \
        (or (not (pair? rules)) \
	    (not (eq? 'syntax-rules (ph rules)))) (error 'define-syntax "expected syntax-rules, got" rules) \
	(or (not (pair? (pt rules))) \
	    (not (pair? (ptt rules)))) (error 'define-syntax "syntax-rules: too few arguments" rules) \
	(not (keywords-ok? (pht rules))) (error 'define-syntax "syntax-rules: malformed keyword list" (pht rules)) \
        (not (rules-ok? (ptt rules))) (error 'define-syntax "syntax-rules: invalid clause in rules" (ptt rules)) \
        else {
          app := (gensym)
	  default := #T{ ((else (error 'define-syntax "invalid syntax" $app))) }

	  #T{
	     define-macro $(pair name app) {
               $app := pair '$name $app
	       syntax-match := $syntax-match
	       syntax-expand := $syntax-expand

	       cond $@(append (rewrite-rules app
					     (pht rules)
					     (ptt rules)
					     '#n)
			      default)
	      }
	  }
        }
  }
}

;;----- Utilities -----

define (print & x*) {
  p :+ function (x* first) {
    if+ (not (null? x*)) {
      if (not first) (write-char #\space)
      write (ph x*)
      p (pt x*) #f
    }
  }

  p x* #t
  (newline)
}

define (locate-file file) {
  split :+ function (s) {
    loop :+ function (in tmp out) {
      if+ (null? in) {
            if (null? tmp) out {
              reverse (pair (list->string (reverse tmp))
			    out)
            }
          } \
	  (char=? #\: (ph in)) {
            loop (pt in) \
		 '#n \
		 (pair (list->string (reverse tmp))
		       out)
          } \
	  else {
	    loop (pt in) \
		 (pair (ph in) tmp) \
		 out
          }
    }

    loop (string->list s) '#n '#n
  }

  loop :+ function (path) {
    if (null? path) #f {
      full-path := string-append (ph path) "/" file

      if (file-exists? full-path) full-path {
        loop (pt path)
      }
    }
  }

  loop (split *library-path*)
}

define (load-from-library file) {
  full-path := locate-file file
  do-load := function (file) {
    if (not *loading*) {
      display "; loading from "
      display file
      (newline)
    } {
     load file
    }
  }

  if full-path {
    do-load full-path
  } {
    full-path := locate-file (string-append file ".idio")
    if full-path {
      do-load full-path
    } {
      error 'load-from-library "cannot locate file" file
    }
  }
}
