;;
;; Copyright (c) 2015 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; common.idio
;;


define (atom? x) {
  not (pair? x)
}

;; http://stackoverflow.com/questions/15552057/is-it-possible-to-implement-define-macro-in-mit-scheme
define-syntax define-syntax-rule (syntax-rules ()
    ((define-syntax-rule (name & pattern) template)
     (define-syntax name
       (syntax-rules ()
         ((name & pattern) template)))))

define-syntax-rule (when test body ...) (
  if test (begin body ...)
)

define-syntax-rule (unless test body ...) (
  if (not test) (begin body ...)
)

load = {
  orig-load := load

  function (filename) {
    if (not (string? filename)) (error 'load "not a string" filename)

    load-k := #n

    monitor (function (cont cond) {
      if (not cont) {
	edisplay "load "
	ewrite filename
	edisplay* ": non-cont-error caught"
	edisplay* cond
	edisplay* "load: invoking safe continuation"
	load-k cond
      } {
	raise cont cond
      }
    }) {
      call/cc (function (k) {
	load-k = k
	orig-load filename
      })
    }
  }
}

define-macro (suppress-errors & cmd) {
  %T{
    monitor (function (cont cond) {
      if cont {
	;; What should we return?  Something hard to mistake for a
	;; possible normal value.  Probably.
	(void)
      } {
	raise cont cond
      }
    }) {
      if (pair? (ph '$cmd)) {
	$@cmd 
      } $cmd
    }
  }
}

;; SRFI-8 receive
;; (define-syntax receive
;;   (syntax-rules ()
;;     ((receive formals expression body ...)
;;      (call-with-values (lambda () expression)
;;                        (lambda formals body ...)))))

define-syntax with-values-from \
  (syntax-rules ()
    ((with-values-from formals expression body ...)
     (call-with-values (function () expression) (function formals body ...))))

