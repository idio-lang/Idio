#*

Copyright (c) 2020 Ian Fitchet <idf(at)idio-lang.org>

Licensed under the Apache License, Version 2.0 (the "License"); you
may not use this file except in compliance with the License.  You
may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

unicode.idio

*#

module unicode
export (
	 ; utility functions
	 unicode-alphabetic?
	 unicode-numeric?
	 unicode-whitespace?
	 unicode-lower-case?
	 unicode-upper-case?
	 unicode-downcase
	 unicode-upcase
	 ; unicode=? is a primitive defined in unicode.c

	 ASCII-alphabetic?
	 ASCII-numeric?
	 ASCII-whitespace?
	 ASCII-lower-case?
	 ASCII-upper-case?
)
import SRFI-14

define (unicode-alphabetic? cp) "
Test if `cp` is alphabetic.

In particular if `cp` is in char-set:letter which has the Unicode
Property Alphabetic

:param cp: Unicode code point
:type cp: integer or unicode
:return: #t or #f
" {
  char-set-ref char-set:letter cp
}

define (unicode-numeric? cp) "
Test if `cp` is numeric.

In particular if `cp` is in char-set:digit which is the Unicode
Category Nd

:param cp: Unicode code point
:type cp: integer or unicode
:return: #t or #f
" {
  char-set-ref char-set:digit cp
}

define (unicode-whitespace? cp) "
Test if `cp` is whitespace.

In particular if `cp` is in char-set:whitespace which has the Unicode
Property White_Space

:param cp: Unicode code point
:type cp: integer or unicode
:return: #t or #f
" {
  char-set-ref char-set:whitespace cp
}

define (unicode-lower-case? cp) "
Test if `cp` is lower case.

In particular if `cp` is in char-set:lower-case which has the Unicode
Property Lowercase

:param cp: Unicode code point
:type cp: integer or unicode
:return: #t or #f
" {
  char-set-ref char-set:lower-case cp
}

define (unicode-upper-case? cp) "
Test if `cp` is upper case.

In particular if `cp` is in char-set:upper-case which has the Unicode
Property Uppercase

:param cp: Unicode code point
:type cp: integer or unicode
:return: #t or #f
" {
  char-set-ref char-set:upper-case cp
}

define (unicode-downcase cp) "
If `cp` is uppercase return the lowercase variant from
char-set:simple-lower-case-map.

In particular if `cp` is not in char-set:upper-case, ie. does *not*
have the Unicode Property Uppercase, then return `cp`.

:param cp: Unicode code point
:type cp: integer or unicode
:return: lowercase variant or `cp`
:rtype: same as `cp`
" {
  cp-i := cp
  if (unicode? cp) {
    cp-i = unicode->integer cp
  }
  if (char-set-ref char-set:upper-case cp-i) {
    lc := hash-ref char-set:simple-lower-case-map cp #f
    if lc lc cp
  } cp
}

define (unicode-upcase cp) "
If `cp` is lowercase return the uppercase variant from
char-set:simple-upper-case-map.

In particular if `cp` is not in char-set:lower-case, ie. does *not*
have the Unicode Property Lowercase, then return `cp`.

:param cp: Unicode code point
:type cp: integer or unicode
:return: uppercase variant or `cp`
:rtype: same as `cp`
" {
  cp-i := cp
  if (unicode? cp) {
    cp-i = unicode->integer cp
  }
  if (char-set-ref char-set:lower-case cp-i) {
    uc := hash-ref char-set:simple-upper-case-map cp #f
    if uc uc cp
  } cp
}

define (ASCII-alphabetic? cp) "
Test if `cp` is alphabetic.

In particular if `cp` is in %char-set:letter which has the Unicode
Property Alphabetic restricted to the ASCII range.

:param cp: Unicode code point
:type cp: integer or unicode
:return: #t or #f
" {
  char-set-ref %char-set:letter cp
}

define (ASCII-numeric? cp) "
Test if `cp` is numeric.

In particular if `cp` is in %char-set:digit which is the Unicode
Category Nd restricted to the ASCII range.

:param cp: Unicode code point
:type cp: integer or unicode
:return: #t or #f
" {
  char-set-ref %char-set:digit cp
}

define (ASCII-whitespace? cp) "
Test if `cp` is whitespace.

In particular if `cp` is in %char-set:whitespace which has the Unicode
Property White_Space restricted to the ASCII range.

:param cp: Unicode code point
:type cp: integer or unicode
:return: #t or #f
" {
  char-set-ref %char-set:whitespace cp
}

define (ASCII-lower-case? cp) "
Test if `cp` is lower case.

In particular if `cp` is in %char-set:lower-case which has the Unicode
Property Lowercase restricted to the ASCII range.

:param cp: Unicode code point
:type cp: integer or unicode
:return: #t or #f
" {
  char-set-ref %char-set:lower-case cp
}

define (ASCII-upper-case? cp) "
Test if `cp` is upper case.

In particular if `cp` is in %char-set:upper-case which has the Unicode
Property Uppercase restricted to the ASCII range.

:param cp: Unicode code point
:type cp: integer or unicode
:return: #t or #f
" {
  char-set-ref %char-set:upper-case cp
}

provide unicode
