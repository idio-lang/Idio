#;(import (scheme base) (scheme char) (scheme file) (scheme write)
          (chibi regexp) (chibi regexp pcre)
          (chibi string) (chibi match) (chibi test))

module test/SRFI-115
import SRFI-115

SRFI-115-0 := Tests

define (maybe-match->sexp rx str & o) {
  res := apply regexp-matches rx str o
  and res (regexp-match->sexp res)
}

define-syntax test-re \
	      (syntax-rules ()
			    ((test-re res rx str start end)
			     (test (maybe-match->sexp rx str start end) res))
			    ((test-re res rx str start)
			     (test-re res rx str start (string-length str)))
			    ((test-re res rx str)
			     (test-re res rx str 0)))

define (maybe-search->sexp rx str & o) {
  res := apply regexp-search rx str o
  
  and res (regexp-match->sexp res)
}

define-syntax test-re-search \
	      (syntax-rules ()
			    ((test-re-search res rx str start end)
			     (test (maybe-search->sexp rx str start end) res))
			    ((test-re-search res rx str start)
			     (test-re-search res rx str start (string-length str)))
			    ((test-re-search res rx str)
			     (test-re-search res rx str 0)))

test-re '("ababc" "abab") \
	'(: ($ (* "ab")) "c") \
	"ababc"

test-re '("ababc" "abab") \
	'(: ($ (* "ab")) "c") \
	"xababc" \
	1

test-re-search '("y") '(: "y") "xy"

test-re-search '("ababc" "abab") \
	       '(: ($ (* "ab")) "c") \
	       "xababc"

test-re #f \
	'(: (* any) ($ "foo" (* any)) ($ "bar" (* any))) \
	"fooxbafba"

test-re '("fooxbarfbar" "fooxbarf" "bar") \
	'(: (* any) ($ "foo" (* any)) ($ "bar" (* any))) \
	"fooxbarfbar"

test-re '("abcd" "abcd") \
	'($ (* (or "ab" "cd"))) \
	"abcd"

;; first match is a list of ab's, second match is the last (temporary) cd
test-re '("abcdc" (("ab") ("cd")) "cd") \
	'(: (* (*$ (or "ab" "cd"))) "c") \
	"abcdc"

test (regexp-match-submatch
      (regexp-matches '(or (-> foo "ab") (-> foo "cd")) "ab")
      'foo) "ab"

test (regexp-match-submatch
      (regexp-matches '(or (-> foo "ab") (-> foo "cd")) "cd")
      'foo) "cd"

;; non-deterministic case from issue #229
#;{
  elapsed := '(: (** 1 2 num) ":" num num (? ":" num num))
  span := #T{ rx $elapsed "-" $elapsed }


  test-re-search '("1:45:02-2:06:13") span " 1:45:02-2:06:13 "
}

test-re '("ababc" "abab") \
	'(: bos ($ (* "ab")) "c") \
	"ababc"
test-re '("ababc" "abab") \
	'(: ($ (* "ab")) "c" eos) \
	"ababc"
test-re '("ababc" "abab") \
	'(: bos ($ (* "ab")) "c" eos) \
	"ababc"
test-re #f \
	'(: bos ($ (* "ab")) eos "c") \
	"ababc"
test-re #f \
	'(: ($ (* "ab")) bos "c" eos) \
	"ababc"

test-re '("ababc" "abab") \
	'(: bol ($ (* "ab")) "c") \
	"ababc"
test-re '("ababc" "abab") \
	'(: ($ (* "ab")) "c" eol) \
	"ababc"
test-re '("ababc" "abab") \
	'(: bol ($ (* "ab")) "c" eol) \
	"ababc"
test-re #f \
	'(: bol ($ (* "ab")) eol "c") \
	"ababc"
test-re #f \
	'(: ($ (* "ab")) bol "c" eol) \
	"ababc"
test-re '("\nabc\n" "abc") \
	'(: (* #\{newline}) bol ($ (* alpha)) eol (* #\{newline})) \
	"\nabc\n"
test-re #f \
	'(: (* #\{newline}) bol ($ (* alpha)) eol (* #\{newline})) \
	"\n'abc\n"
test-re #f \
	'(: (* #\{newline}) bol ($ (* alpha)) eol (* #\{newline})) \
	"\nabc.\n"

test-re '("ababc" "abab") \
	'(: bow ($ (* "ab")) "c") \
	"ababc"
test-re '("ababc" "abab") \
	'(: ($ (* "ab")) "c" eow) \
	"ababc"
test-re '("ababc" "abab") \
	'(: bow ($ (* "ab")) "c" eow) \
	"ababc"
test-re #f \
	'(: bow ($ (* "ab")) eow "c") \
	"ababc"
test-re #f \
	'(: ($ (* "ab")) bow "c" eow) \
	"ababc"
test-re '("  abc  " "abc") \
	'(: (* space) bow ($ (* alpha)) eow (* space)) \
	"  abc  "
test-re #f \
	'(: (* space) bow ($ (* alpha)) eow (* space)) \
	" 'abc  "
test-re #f \
	'(: (* space) bow ($ (* alpha)) eow (* space)) \
	" abc.  "
test-re '("abc  " "abc") \
	'(: ($ (* alpha)) (* any)) \
	"abc  "
test-re '("abc  " "") \
	'(: ($ (*? alpha)) (* any)) \
	"abc  "
test-re '("<em>Hello World</em>" "em>Hello World</em") \
	'(: "<" ($ (* any)) ">" (* any)) \
	"<em>Hello World</em>"
test-re '("<em>Hello World</em>" "em") \
	'(: "<" ($ (*? any)) ">" (* any)) \
	"<em>Hello World</em>"
test-re-search '("foo") '(: "foo") " foo "
test-re-search #f '(: nwb "foo" nwb) " foo "
test-re-search '("foo") '(: nwb "foo" nwb) "xfoox"

test-re '("beef") \
	'(* (/"af")) \
	"beef"

test-re '("12345beef" "beef") \
	'(: (* digit) ($ (* (/"af")))) \
	"12345beef"

{
  number := '($ (+ digit))
  test (pt
	(regexp-match->list
	 (regexp-search `(: ,number "-" ,number "-" ,number)
			"555-867-5309"))) \
       '("555" "867" "5309")

  test (pt
	(regexp-match->list
	 (regexp-search `(: ,number "-" (w/nocapture ,number) "-" ,number)
			"555-867-5309"))) \
       '("555" "5309")

}

test-re '("12345BeeF" "BeeF") \
	'(: (* digit) (w/nocase ($ (* (/"af"))))) \
	"12345BeeF"

test-re #f '(* lower) "abcD"
test-re '("abcD") '(w/nocase (* lower)) "abcD"
test-re '("σζ") '(* lower) "σζ"
test-re '("Σ") '(* upper) "Σ"
#*
test-re '("\x01C5;") '(* title) "\x01C5;"
test-re '("σζ\x01C5;") '(w/nocase (* lower)) "σζ\x01C5;"
*#
test-re '("кириллица") '(* alpha) "кириллица"
test-re #f '(w/ascii (* alpha)) "кириллица"
test-re '("кириллица") '(w/nocase "КИРИЛЛИЦА") "кириллица"

test-re '("１２３４５") '(* digit) "１２３４５"
test-re #f '(w/ascii (* digit)) "１２３４５"

test-re '("한") 'grapheme "한"
test-re '("글") 'grapheme "글"

test-re '("한") '(: bog grapheme eog) "한"
test-re #f '(: "ᄒ" bog grapheme eog "ᆫ") "한"

test (regexp-extract 'grapheme "abc") '("a" "b" "c")
test (regexp-extract 'grapheme "a b c") '("a" " " "b" " " "c")
;test (regexp-extract 'grapheme "a\nb\r\nc") '("a" "\n" "b" "\r\n" "c")
#*
test '("a\x0300;" "b\x0301;\x0302;" "c\x0303;\x0304;\x0305;") \
      (regexp-extract 'grapheme "a\x0300;b\x0301;\x0302;c\x0303;\x0304;\x0305;")
*#
;test '("한" "글") (regexp-extract 'grapheme "한글")

test (regexp-extract '(+ digit) "abc123def456ghi789") '("123" "456" "789")
test (regexp-extract '(* digit) "abc123def456ghi789") '("123" "456" "789")
test (regexp-split '(+ digit) "abc123def456ghi789") '("abc" "def" "ghi" "")
test (regexp-split '(* digit) "abc123def456ghi789") '("abc" "def" "ghi" "")

test (regexp-split '(+ whitespace) "a b") '("a" "b")
test (regexp-split '(",;") "a,,b") '("a" "" "b")

test (regexp-split '(",;") "a,,b,") '("a" "" "b" "")

test (regexp-partition '(* digit) "") '("")

test (regexp-partition '(* digit) "abc123def456ghi") '("abc" "123" "def" "456" "ghi")

test (regexp-partition '(* digit) "abc123def456ghi789") '("abc" "123" "def" "456" "ghi" "789")


#*
(test '("한" "글")
          (regexp-extract
           'grapheme
           (utf8->string '#u8(#xe1 #x84 #x92 #xe1 #x85 #xa1 #xe1 #x86 #xab
                                   #xe1 #x84 #x80 #xe1 #x85 #xb3 #xe1 #x86 #xaf))))
*#

test (regexp-replace '(+ space) "abc \t\n def" " ") "abc def"
test (regexp-replace '(: ($ (+ alpha)) ":" (* space)) "  abc: " '(1 "-" 1)) "  abc-abc"

test (regexp-replace '(: ($ (+ alpha)) ":" (* space)) "  abc: " '(1 "-" pre 1)) "  abc-  abc"


test (regexp-replace '(+ space) "  abc \t\n d ef  " "-" 0) "-abc \t\n d ef  "

test (regexp-replace '(+ space) "  abc \t\n d ef  " "-" 0 #f 0) "-abc \t\n d ef  "

test (regexp-replace '(+ space) "  abc \t\n d ef  " "-" 0 #f 1) "  abc-d ef  "

test (regexp-replace '(+ space) "  abc \t\n d ef  " "-" 0 #f 2) "  abc \t\n d-ef  "

test (regexp-replace '(+ space) "  abc \t\n d ef  " "-" 0 #f 3) "  abc \t\n d ef-"

test (regexp-replace '(+ space) "  abc \t\n d ef  " "-" 0 #f 4) "  abc \t\n d ef  "

test (regexp-replace-all '(+ space) "  abc \t\n d ef  " " ") " abc d ef "

test (regexp-replace
      '(: ($ (+ alpha)) ":" (* space))
      "abc def: ghi"
      '("pre: <<<" pre ">>> match1: <<<" 1 ">>> post: <<<" post ">>>")
      1 11) "bc pre: <<<bc >>> match1: <<<def>>> post: <<<gh>>>gh"


;; all done?
test (SRFI-115-0 + 79) Tests
