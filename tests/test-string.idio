;;
;; Copyright (c) 2015, 2020, 2021 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; test-string.idio
;;
string0 := Tests

;; most regular string tests are in s9-tests.idio

;; split
test (split-string "abc" "b") '("a" "c")
test (split-string "abc" "a") '("bc")
test (split-string "abc" "c") '("ab")

test (split-string "abbc" "b") '("a" "c")
test (split-string "aabc" "a") '("bc")
test (split-string "abcc" "c") '("ab")

test (split-string "abc" "z") '("abc")
test (split-string "" "z") '("")

;; split-string will produce substrings so can we split those?
;; strtok(3) man page:

STR := "a/bbb///cc;xxx:yyy:"
DE1 := ":;"
DE2 := "/"

RES := map (function (substr) {
	      SUBRES := map (function (subsubstr) {
			       subsubstr
	      }) (split-string substr DE2)
	      pair substr SUBRES
}) (split-string STR DE1)
test RES '(("a/bbb///cc" "a" "bbb" "cc") ("xxx" "xxx") ("yyy" "yyy"))

;; tripped up over this walking over DerivedCoreProperties.txt
STR = "002B          ; Math # Sm       PLUS SIGN"
parts := split-string STR "#"
dcp_parts := split-string (ph parts) ";"
range := split-string (ph dcp_parts) ".." ; boom! substring extends beyong parent string length: 111011129 002B          ; Math 

;; join
test (join-string "b" '("a" "c")) "abc"
test (join-string "b" '("a")) "a"
test (join-string "" '("a" "c")) "ac"
test (join-string "b" #n) ""

;; operators
s := "abc"
test (string-ref s 0) #\a
test (s.0) #\a

test/error (string-set! s 0 #\x) #n "bad parameter: string (\"abc\") is constant"
s = copy-string s
string-set! s 0 #\x
test (string-ref s 0) #\x
test (s.0) #\x

;; setters
set! s.1 #\y
test (s.1) #\y

s.2 = #\z
test (s.2) #\z

test s "xyz"

; code coverage - copy a substring
s = "hello world"
sa := split-string s " "
ss-dup := copy-string sa.1
test ss-dup sa.1

;; all done?
Tests? (string0 + 22)
