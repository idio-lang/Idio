;;; ARRAY1 -- One of the Kernighan and Van Wyk benchmarks.

;; (define (create-x n)
;;   (define result (make-vector n))
;;   (do ((i 0 (+ i 1)))
;;       ((>= i n) result)
;;     (vector-set! result i i)))

;; (define (create-y x)
;;   (let* ((n (vector-length x))
;;          (result (make-vector n)))
;;     (do ((i (- n 1) (- i 1)))
;;         ((< i 0) result)
;;       (vector-set! result i (vector-ref x i)))))

;; (define (my-try n)
;;   (vector-length (create-y (create-x n))))

;; (define (go n)
;;   (let loop ((repeat 10000)
;;              (result '()))
;;     (if (> repeat 0)
;;         (loop (- repeat 1) (my-try n))
;;         result)))

;; (go 100)

create-x := function (n) {
  result := make-array n
  do ((i 0 (i + 1))) \
     ((ge i n) result) {
       array-set! result i i
     }
}

create-y := function (x) {
  n := array-length x
  result := make-array n
  do ((i (n - 1) (i - 1))) \
     ((lt i 0) result) {
       array-set! result i (array-ref x i)
     }
}

my-try := function (n) {
  array-length (create-y (create-x n))
}

go := function (n) {
  repeat := 10000
  result := #n
  loop :+ function (repeat result) {
    if (gt repeat 0) (loop (repeat - 1) (my-try n)) result
  }
  loop repeat result
}

go 100
