;;
;; Copyright (c) 2015, 2017, 2020 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; condition.idio
;;
module tests/condition
import libc

condition0 := Tests

test (condition-type? ^condition) #t
test (message-condition? ^condition) #f
test (condition? ^condition) #f

test (condition-type? ^message) #t
test (message-condition? ^message) #f
test (error? ^message) #f

test (condition-type? ^error) #t
test (message-condition? ^error) #f
test (error? ^error) #f

;; make-condition-type
mct1 := make-condition-type 'mct1 ^condition 'f1
test (condition-type? mct1) #t
test (error? mct1) #f

c1 := condition mct1 (f1 10)
test (condition? c1) #t
test (condition-type? c1) #f
test (condition-ref c1 'f1) 10

mct2 := make-condition-type 'mct2 ^message 'f2
test (condition-type? mct2) #t
test (message-condition? mct2) #f
test (error? mct2) #f

c2/1 := condition mct2 (f2 20)
test (condition? c2/1) #t
test (condition-type? c2/1) #f
test (message-condition? c2/1) #t
test (condition-ref c2/1 'f2) 20

msg := "bob"
c2/2 := condition mct2 (f2 20) (message msg)
test (condition? c2/2) #t
test (condition-type? c2/2) #f
test (condition-ref c2/2 'message) msg
test (condition-message c2/2) msg
test (condition-ref c2/2 'f2) 20

c2/3 := condition mct2 (message msg) (f2 20)
test (condition? c2/3) #t
test (condition-type? c2/3) #f
test (condition-ref c2/3 'message) msg
test (condition-message c2/3) msg
test (condition-ref c2/3 'f2) 20

mct3 := make-condition-type 'mct3 ^error 'f3
test (condition-type? mct3) #t
test (message-condition? mct3) #f
test (error? mct3) #f

c3 := condition mct3 (f3 30)
test (condition? c3) #t
test (condition-type? c3) #f
test (message-condition? c3) #f
test (error? c3) #t
test (condition-ref c3 'f3) 30

mct4 := make-condition-type 'mct4 ^error 'f4/1 'f4/2
test (condition-type? mct4) #t
test (message-condition? mct4) #f
test (error? mct4) #f

c4 := condition mct4 (f4/1 41) (f4/2 42)
test (condition? c4) #t
test (condition-type? c4) #f
test (message-condition? c4) #f
test (error? c4) #t
test (condition-ref c4 'f4/1) 41

;; define-condition-type
define-condition-type dct5 ^condition f5
test (condition-type? dct5) #t
test (error? dct5) #f

c5 := condition dct5 (f5 50)
test (condition-type? c5) #f
test (condition? c5) #t
test (dct5? c5) #t
test (condition-ref c5 'f5) 50
test (dct5-f5 c5) 50

define-condition-type dct6 ^condition f6/1 f6/2
test (condition-type? dct6) #t
test (error? dct6) #f

c6 := condition dct6 (f6/1 60)
test (condition-type? c6) #f
test (condition? c6) #t
test (dct6? c6) #t
test (condition-ref c6 'f6/1) 60
test (dct6-f6/1 c6) 60

define-condition-type dct7 ^message f7
test (condition-type? dct7) #t
test (message-condition? dct7) #f
test (error? dct7) #f

c7 := condition dct7 (f7 70) (message msg)
test (condition-type? c7) #f
test (condition? c7) #t
test (dct7? c7) #t
test (message-condition? c7) #t
test (condition-ref c7 'f7) 70
test (dct7-f7 c7) 70
test (condition-ref c7 'message) msg
test (condition-message c7) msg

;; SRFI-36-ish
test (condition-type? ^i/o-error) #t
test (condition? ^i/o-error) #f
test (error? ^i/o-error) #f

c8 := condition ^i/o-error
test (condition? c8) #t
test (i/o-error? c8) #t

test (condition-type? ^i/o-handle-error) #t
test (error? ^i/o-handle-error) #f

c9 := condition ^i/o-handle-error (handle (current-input-handle))
test (i/o-handle-error? c9) #t
test (i/o-error? c9) #t
test (i/o-error-handle c9) (current-input-handle)

test (condition-type? ^i/o-no-such-file-error) #t
test (error? ^i/o-no-such-file-error) #f

test_filename := "..test-file.."
c10 := condition ^i/o-no-such-file-error (filename test_filename)
test (i/o-no-such-file-error? c10) #t
test (i/o-filename-error? c10) #t
test (i/o-error? c10) #t
test (i/o-filename-error-filename c10) test_filename

;; Try to capture the various continuable io errors generated
;; internally together with some "repair" in the handler code.
;; 
;; Exceptions generating exceptions is a bit too hairy for this
;; simplistic testing.

;; ^i/o-read-error
;;
trap ^i/o-read-error (function (c) {
			test (i/o-read-error? c) #t
			handle := i/o-error-handle c

			'caught-a-read-error
}) {
  ;; display* "read handle condition"

  osh := (open-output-string)
  expr := *primitives*/read osh
  close-handle osh
  test expr 'caught-a-read-error
}

;; ^i/o-write-error
;;
trap ^i/o-write-error (function (c) {
			 test (i/o-write-error? c) #t
			 handle := i/o-error-handle c

			 'caught-a-write-error
}) {
  ;; display* "write handle condition"

  ish := open-input-string "bob"
  r := *primitives*/write "Hello" ish
  close-handle ish

  test r 'caught-a-write-error
}

;; ^i/o-closed-error
;;
;; only file-handles generate this
trap ^i/o-closed-error (function (c) {
			  test (i/o-closed-error? c) #t
			  handle := i/o-error-handle c

			  #t
}) {
  touch test_filename
  chmod +r test_filename

  ifh := open-input-file test_filename
  close-handle ifh
  close-handle ifh
}

;; discovered in s9-test.idio after adding the SRFI-36 conditions:
trap ^i/o-closed-error (function (c) {
			  test (i/o-closed-error? c) #t
			  #t
}) {
  ;; display* "closed handle condition"
  test {
    call-with-output-file testfile (function (out) {
      *primitives*/write '(this is a test) out

      ;; the cause of the error -- call-with-output-file will also
      ;; call close-output-handle (generating the condition) but we
      ;; need to close the handle here otherwise call-with-input-file
      ;; will get #eof
      close-output-handle out
      call-with-input-file testfile *primitives*/read
    })
  } '(this is a test)
}


;; ^i/o-filename-error
;; 
;; ie. none of the below.  Let's try ENOTDIR.  Opening a non-existent
;; directory name, eg.  ..../test_filename, gets an
;; ^i/o-no-such-file-error so you seem to need to use an existing
;; non-dir file in the position of a directory (actually, much like
;; the man page says...).  Here, we'll use test_filename in a
;; directory component as ./test_filename/test_filename
trap ^i/o-filename-error (function (c) {
			    test (i/o-filename-error? c) #t
			    filename := i/o-filename-error-filename c

			    ;; use a safe file instead of {filename} (which is
			    ;; ./test_filename/test_filename and just had an error!)
			    ;;
			    ;; test_filename on its own *is* safe but make sure it's writable
			    chmod +w test_filename
			    open-output-file test_filename
}) {
  ;; display* "generic filename condition"

  ;; we need to ensure that {test_filename} exists as a file in order
  ;; to provoke the condition when trying to use it as a directory
  rm -f test_filename
  touch test_filename

  dir_filename := string-append "./" test_filename "/" test_filename

  ofh := open-output-file dir_filename
  ;; test we have a writeable fh
  *primitives*/write "Hello" ofh
  close-handle ofh
}


;; ^i/o-malformed-filename-error
;;
;; Slightly tricky this one.  Non-string filenames are captured
;; separately as bad parameters.  The only thing we currently identify
;; as a bad filename is ENAMETOOLONG.  This requires we generate a
;; name that is greater than PATH_MAX.
;;
;; PATH_MAX?  POSIX says 256, Solaris & MacOS say 1024, Linux says 4096
;;
trap ^i/o-malformed-filename-error (function (c) {
				      test (i/o-malformed-filename-error? c) #t
				      filename := condition-ref c 'filename

				      ;; use a safe file instead of filename
				      open-output-file test_filename
}) {
  ;; display* "opening malformed filename"
  bad_filename := make-string ((C/->integer PATH_MAX) + 100) #\a

  ofh := open-output-file bad_filename
  ;; test we have a writeable fh
  *primitives*/write "Hello" ofh
  close-handle ofh
}

;; ^i/o-file-protection-error
;;
;; NB. Nothing internally generates a ^i/o-file-is-read-only-error and
;; read-only issues are collected under the guise of protection errors
;; (EACCES)
trap ^i/o-file-protection-error (function (c) {
				   test (i/o-file-protection-error? c) #t
				   filename := condition-ref c 'filename
				   chmod +r filename
				   open-input-file filename
}) {
  ;; display* "opening 0-perms file"
  touch test_filename
  ;; NB need to escape '=' otherwise we are assigning to the variable
  ;; 'chmod'
  chmod \= test_filename

  ifh := open-input-file test_filename
  close-handle ifh
}

;; ^i/o-file-already-exists-error
;;
;; The code to react to EEXIST is present but to generate it requires
;; a non-POSIX extension, the "x" mode character for fopen(3).  This
;; is part of ISO C11.
;;
;; This is supported on Linux, MacOS.  Not supported on Solaris
;; (OpenIndiana).
if (equal? (struct-utsname-sysname libc/idio-uname) "SunOS") {
  ;; edisplay* "Solaris: no fopen (\"x\") flag: skipping"
  Tests = Tests + 1
} {
  trap ^i/o-file-already-exists-error (function (c) {
					 test (i/o-file-already-exists-error? c) #t
					 filename := condition-ref c 'filename

					 ;; our "repair" is simply to open the file anyway
					 open-output-file filename
  }) {
    ;; display* "opening existing file"
    touch test_filename
    chmod =rw test_filename

    ofh := open-file test_filename "wx"
    ;; test we have a writeable fh
    *primitives*/write "Hello" ofh
    close-handle ofh
  }
}

;; ^i/o-no-such-file-error
trap ^i/o-no-such-file-error (function (c) {
				test (i/o-no-such-file-error? c) #t
				filename := condition-ref c 'filename

				;; we could simply touch(1) the file...
				ofh := open-output-file filename
				close-handle ofh

				open-input-file filename
}) {
  ;; display* "opening non-existent file"
  if (file-exists? test_filename) (delete-file test_filename)

  ifh := open-input-file test_filename
  close-handle ifh
}

if (file-exists? test_filename) (delete-file test_filename)

;; A continuable error, we set a default-condition-handler to
;; specifically return a magic symbol, 'default-idio-error, something
;; we can test for.
set-default-handler! ^idio-error (function (c) {
				    'test-condition-default-idio-error
})

test (raise (make-condition ^idio-error "continuable condition" "loc" "det")) 'test-condition-default-idio-error

;; all done?
test (condition0 + 101) Tests

clear-default-handler! ^idio-error

