
;; binarytrees.idio

define-struct TreeNode item left right

define (trees maxDepth) {
  longLastingNode := createTree 0 maxDepth
  depth := 4

  ;display* "trees:" maxDepth depth

  do () ((gt depth maxDepth) depth) {
        iterations := expt 2 (4 + (maxDepth - depth))
	;display* "iterations:" iterations
        loops iterations depth
        depth = depth + 2
      }

  display* "long lived tree of depth" maxDepth "\t check:" (checkTree longLastingNode)
}

define (loops iterations depth) {
  ;display* "loops:" iterations depth
  check := 0
  item := 0

  do () ((ge item iterations) item) {
        check = check + 
 	        (checkTree (createTree item depth)) +
	        (checkTree (createTree (0 - item) depth))
        item = item + 1
      }

  display* (iterations * 2) "\t trees of depth" depth "\t check:" check
}

define (createTree item depth) {
  ;display* "createTree:" item depth
  node := make-TreeNode item #n #n

  if (gt depth 0) {
    item = item + item
    depth = depth - 1
    node.left = createTree (item - 1) depth
    node.right = createTree item depth
  }

  node
}

define (checkTree node) {
  ;display* "checkTree:" node.item
  if (null? node.left) node.item ((checkTree node.left) - (checkTree node.right) + node.item)
}


maxDepth := 10
if (gt 6 maxDepth) {
  maxDepth = 6
}
stretchDepth := maxDepth + 1

display* "stretch tree of depth" stretchDepth "\t check:" (checkTree (createTree 0 stretchDepth))

trees maxDepth
