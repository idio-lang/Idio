; These are the examples from
; https://srfi.schemers.org/srfi-89/srfi-89.html

if (not (expander? 'define*)) {
  edisplay* "expander? 'define*" (expander? 'define*)
  libc/exit 4
}

trap ^idio-error (function (c) {
		    edisplay* "caught" c
		    #f
}) {
  define* (f a (b #f)) (list a b)

  display* (f 1) " ==   (1 #f)"
  display* (f 1 2) " ==   (1 2)"
  ;display* (f 1 2 3) " ==   error"

  display* "Now for keywords"
  define* (g a (b a) (:key k (* a b))) (list a b k)
  display* g
  
  display* (g 3) " ==   (3 3 9)"
  display* (g 3 4) " ==   (3 4 12)"
  ;display* (g 3 4 :key) " ==   error"
  display* (g 3 4 :key 5) " ==   (3 4 5)"
  ;display* (g 3 4 :zoo 5) " ==   error"
  ;display* (g 3 4 :key 5 :key 6) " ==   error"

  define* (h1 a (:key k #f) & r) (list a k r)

  display* (h1 7) " ==   (7 #f ())"
  display* (h1 7 8 9 10) " ==   (7 #f (8 9 10))"
  display* (h1 7 :key 8 9 10) " ==   (7 8 (9 10))"
  ;display* (h1 7 :key 8 :zoo 9) " ==   error"

  define* (h2 (:key k #f) a & r) (list a k r)

  display* (h2 7) " ==   (7 #f ())"
  display* (h2 7 8 9 10) " ==   (7 #f (8 9 10))"
  display* (h2 :key 8 9 10) " ==   (9 8 (10))"
  ;display* (h2 :key 8 :zoo 9) " ==   error"

  j := {
    function* ((:a a 1)) {
      edisplay* "a = " a
    }
  }

  display* (j)
  ;display* (j 2)
  display* (j :a 2)

  #*
  define absent (list 'absent)

  define (element tag content & attributes) {
  edisplay* 'element tag content attributes
  list "<" tag attributes ">" content "</" tag ">"
  }
  
  define (attribute name value) {
  edisplay* 'attribute name value
  if (eq? value absent) #n {
  list " " name "=" (escape value)
  }
  }

  define (escape value) value ; could be improved!
  
  define (make-html-styler tag) {
  edisplay* 'make-html-styler tag
  function* ((:id          id          absent)
  (:class       class       absent)
  (:title       title       absent)
  (:style       style       absent)
  (:dir         dir         absent)
  (:lang        lang        absent)
  (:onclick     onclick     absent)
  (:ondblclick  ondblclick  absent)
  (:onmousedown onmousedown absent)
  (:onmouseup   onmouseup   absent)
  (:onmouseover onmouseover absent)
  (:onmousemove onmousemove absent)
  (:onmouseout  onmouseout  absent)
  (:onkeypress  onkeypress  absent)
  (:onkeydown   onkeydown   absent)
  (:onkeyup     onkeyup     absent)
  &
  content) {

  element tag \
	  content \
	  (attribute "id" id) \
	  (attribute "class" class) \
	  (attribute "title" title) \
	  (attribute "style" style) \
	  (attribute "dir" dir) \
	  (attribute "lang" lang) \
	  (attribute "onclick" onclick) \
	  (attribute "ondblclick" ondblclick) \
	  (attribute "onmousedown" onmousedown) \
	  (attribute "onmouseup" onmouseup) \
	  (attribute "onmouseover" onmouseover) \
	  (attribute "onmousemove" onmousemove) \
	  (attribute "onmouseout" onmouseout) \
	  (attribute "onkeypress" onkeypress) \
	  (attribute "onkeydown" onkeydown) \
	  (attribute "onkeyup" onkeyup) \
	  }
  }

  define html-b      (make-html-styler "b")
  define html-big    (make-html-styler "big")
  define html-cite   (make-html-styler "cite")
  define html-code   (make-html-styler "code")
  define html-dfn    (make-html-styler "dfn")
  define html-em     (make-html-styler "em")
  define html-i      (make-html-styler "i")
  define html-kbd    (make-html-styler "kbd")
  define html-samp   (make-html-styler "samp")
  define html-small  (make-html-styler "small")
  define html-strong (make-html-styler "strong")
  define html-tt     (make-html-styler "tt")
  define html-var    (make-html-styler "var")

  define* (print (:port port (current-output-port)) & args) {
  edisplay* 'print port args
  pr := function (x) {
  cond ((null? x)) \
       ((pair? x)
  (pr (car x))
  (pr (cdr x))) \
       ((array? x)
  (pr (array->list x))) \
       (else
  (display x port))
  }
  pr args
  }

  print (html-i :class 'molecule
  :id 'water
  (html-big "H")
  (html-small "2")
  (html-big "O"))

  " ==   displays on the current output :port
  <i id=water class=molecule><big>H</big><small>2</small><big>O</big></i>
  "

  *#
}