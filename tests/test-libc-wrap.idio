;;
;; Copyright (c) 2015, 2017, 2020 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; libc.idio
;;
module tests/libc-wrap
import libc

libc-wrap0 := Tests

define (number-cmp low high) {
  if (not (eqv? low high)) {
    test (C/< low high) #t
    test (C/< high low) #f
    test (C/<= low high) #t
    test (C/<= high low) #f
    test (C/<= high high) #t
    test (C/== high high) #t
    test (C/== low high) #f
    test (C/> low high) #f
    test (C/> high low) #t
    test (C/>= low high) #f
    test (C/>= high low) #t
    test (C/>= high high) #t
  } {
    test (C/== low high) #t
  }
}
;; numbers

;; quick type tests of the primitively-definied INTMAX_MAX and the
;; locally defined intmax-max
test (C/int? INTMAX_MAX) #t
intmax-max := INTMAX_MAX
test (C/int? intmax-max) #t

;; comparison tests vs. 0
number-cmp (C/integer-> 0) INTMAX_MAX
number-cmp INTMAX_MIN (C/integer-> 0)

;; comparison tests vs lim-1
INTMAX_MAX-1 := C/integer-> ((C/->integer INTMAX_MAX) - 1)
number-cmp INTMAX_MAX-1 INTMAX_MAX

;; comparison tests vs lim+1
INTMAX_MIN+1 := C/integer-> ((C/->integer INTMAX_MIN) + 1)
number-cmp INTMAX_MIN INTMAX_MIN+1

;; overflow conversion tests -- one beyond the C MAX/MIN
trap ^rt-bignum-conversion-error (function (c) {
				    ;; edisplay* "bignum INTMAX_MAX+1 conversion error" c
				    test (rt-bignum-conversion-error? c) #t
				    #f
}) {
  INTMAX_MAX+1 := (C/integer-> ((C/->integer INTMAX_MAX) + 1))
  test INTMAX_MAX+1 #f
  ;; display* "INTMAX_MAX+1" INTMAX_MAX INTMAX_MAX+1
}

trap ^rt-bignum-conversion-error (function (c) {
				    ;; edisplay* "bignum INTMAX_MIN-1 conversion error" c
				    test (rt-bignum-conversion-error? c) #t
				    #f
}) {
  INTMAX_MIN-1 := (C/integer-> ((C/->integer INTMAX_MIN) - 1))
  test INTMAX_MIN-1 #f
  ;; display* "INTMAX_MIN-1" INTMAX_MIN INTMAX_MIN-1
}

;; overflow conversion tests -- many beyond the C MAX/MIN
trap ^rt-bignum-conversion-error (function (c) {
				    ;; edisplay* "bignum INTMAX_MAX+1 conversion error" c
				    test (rt-bignum-conversion-error? c) #t
				    #f
}) {
  INTMAX_MAX+1 := (C/integer-> ((C/->integer INTMAX_MAX) * 100000))
  test INTMAX_MAX+1 #f
  ;; display* "INTMAX_MAX+1" INTMAX_MAX INTMAX_MAX+1
}

trap ^rt-bignum-conversion-error (function (c) {
				    ;; edisplay* "bignum INTMAX_MIN-1 conversion error" c
				    test (rt-bignum-conversion-error? c) #t
				    #f
}) {
  INTMAX_MIN-1 := (C/integer-> ((C/->integer INTMAX_MIN) * 100000))
  test INTMAX_MIN-1 #f
  ;; display* "INTMAX_MIN-1" INTMAX_MIN INTMAX_MIN-1
}

;; all done?
test (libc-wrap0 + 58) Tests
