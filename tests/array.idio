;;
;; Copyright (c) 2015 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; array.idio
;;
array0 = Tests

test (array? #[ 1 2 ]) #t
test (array? "foo") #f

a = (make-array 3)
test (array? a) #t
test (array-length a) 3
test (array-ref a 0) #f

a = (make-array 5 "foo")
test (array? a) #t
test (array-length a) 5
test (array-ref a 0) "foo"

;; basic array access
a := #[ 1 2 3 ]

test (array? a) #t
test a '#[ 1 2 3 ]

test (array-length a) 3
test (array-ref a 1) 2
test (array-ref a -1) 3
array-set! a 1 4
test (array-ref a 1) 4

;; generate some OOB errors
monitor (function (cont cond) {
  ;; display* "array OOB monitor condition:" (struct-type-name cond)
  test (rt-array-bounds-error? cond) #t
  if cont {
    if (rt-array-bounds-error? cond) {
      #f
    } (error "array OOB: unexpected condition" cond)
  } (error "array OOB: unexpected non-continuable error" cond)
}) {
  array-ref a 4
  array-ref a -4
  array-set! a 99 "boo!"
  array-set! a -99 "boo!"

  ;; referencing into an empty array
  a = #[]
  array-ref a 0

  array-set! a 0 "boo"
}

;; fill
a = #[ 1 2 3 ]
array-fill! a "apple"
test (array-length a) 3
test (array-ref a 1) "apple"
test (array-ref a 1) (array-ref a 0) 

;; from lists
a = list->array '(1 2 3)
test a '#[ 1 2 3 ]

;; to lists
test (array->list a) '( 1 2 3 )

;; array operator tests
a := #[ 1 2 3 ]

;; push
a =+ 'r
test a '#[ 1 2 3 r ]

;; pop
v := a =-
test v 'r
test a '#[ 1 2 3 ]

;; unshift
a += 'r
test a '#[ r 1 2 3 ]

;; shift
v = a -=
test v 'r
test a '#[ 1 2 3 ]

;; again with an empty array
a = #[]
test a '#[]

;; push
a =+ 'r
test a '#[ r ]

;; pop
v = a =-
test v 'r
test a '#[]

;; unshift
a += 'r
test a '#[ r ]

;; shift
v = a -=
test v 'r
test a '#[]

;; pop/shift of an empty array
v = a =-
test v #n
test a '#[]

v = a -=
test v #n
test a '#[]

;; array indexing
a = #[ 1 #[ 10 20 30 ] 3 ]

;; formatting
test (a.0) 1
test (a . 0) 1
test (a. 0) 1
test (a .0) 1

b := 2
test (a.b) 3
test (a.(1 + 1)) 3

test (a.1) '#[ 10 20 30 ]

;; a.1.1 looks like a . 1.1 so use whitespace or a variable instead of
;; any literal integer followed by a DOT
test (a . 1 . 1) 20
test (a.1 .1) 20

i = 1
test (a.i.i) 20
test (a.i.1) 20
test (a.(0 + 1).(0 + 1)) 20

;; setter
a = #[ 1 2 3 ]
set! a.0 4
test (a.0) 4
a.0 = 5
test (a.0) 5

a = #[ 1 #[ 10 20 30 ] 3 ]
a.1 .1 = 40
test (a.1 .1) 40

;; all done?
test (array0 + 57) Tests
