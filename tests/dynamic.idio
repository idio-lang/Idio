;;
;; Copyright (c) 2015 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; dynamic.idio
;;
dynamic0 := Tests

;; dynamic values

;; XXX be careful to use new non-lexical toplevel symbols...

;; have functions ready to test future dynamic variables
define (test-dvar-x1 exp) {
  ;; test a regular local
  test exp x

  ;; test the dynamic variable
  test (dynamic dvar-x1) exp
}

define (test-dvar-x2 exp) {
  ;; test a regular local
  test exp x

  ;; test the dynamic variable
  test (dynamic dvar-x2) exp
}

x = 10

;; create a local dynamic variable
dynamic-let (dvar-x1 x) {
  test (dynamic? 'dvar-x1) #t

  ;; test it here
  test (dynamic dvar-x1) x

  ;; test it in our prepared function
  test-dvar-x1 x
}

;; ^rt-dynamic-variable-unbound-error is raised when calling a
;; function where no such variable is in scope
monitor (function (cont cond) {
  ;; display* "unbound dynamic monitor condition:" (struct-type-name cond)
  test (rt-dynamic-variable-unbound-error? cond) #t
  if cont {
    if (rt-dynamic-variable-unbound-error? cond) {
      name := condition-ref cond 'name

      ;; we know that test-dvar-x1 in our body was passed x
      x
    } (error "unbound dynamic: unexpected condition" cond)
  } (error "unbound dynamic: unexpected non-continuable error" cond)
}) {
  ;; display* "using unbound dynamic variable"
  test-dvar-x1 x
}

;; create a toplevel dynamic variable
dvar-x2 :~ 11
test (dynamic? 'dvar-x2) #t

;; test it here
test dvar-x2 11

;; test it in a prepared function
test-dvar-x2

;; all done?
test (dynamic0 + 9) Tests
