;;
;; Copyright (c) 2015, 2017 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; hash.idio
;;
hash0 := Tests

;; hash operator tests
ht := (make-hash)

test (hash-size ht) 0
test (hash-exists? ht 'a) #f

hash-set! ht 'a 3
test (hash-size ht) 1
test (hash-exists? ht 'a) #t
test (hash-ref ht 'a) 3

trap ^rt-hash-key-not-found (function (cont cond) {
  test (rt-hash-key-not-found? cond) #t
  if cont {
    #f
  } (error "hash key not found: unexpected non-continuable error" cond)
}) {
  test (hash-ref ht 'b) #f
}

default := function () 99

test (hash-ref ht 'b default) 99

hash-set! ht 'b 5
test (hash-ref ht 'b default) 5

;; hash-update!
add10 := function (v) {
  v + 10
}

hash-update! ht 'a add10
test (hash-ref ht 'a) 13

hash-update! ht 'c add10 default
test (hash-ref ht 'c) 109

hash-delete! ht 'a
test (hash-size ht) 2
test (hash-exists? ht 'a) #f

hash-delete! ht 'd
test (hash-size ht) 2

;; no guaranteed order so can only count
test (length (hash-keys ht)) 2
test (length (hash-values ht)) 2

;; hash-walk
sum := 0
addv := function (k v) {
  sum = sum + v
}

;; we should have b and c in the hash with values 5 and 109
hash-walk ht addv
test sum 114

;; hash-fold
accv := function (k v i) {
  i + v
}

test (hash-fold ht accv 0) 114

;; hash-copy
nht := hash-copy ht

test (hash-size nht) 2
test (hash-fold nht accv 0) 114

hash-set! nht 'a 3
test (hash-size nht) 3
test (hash-fold nht accv 0) 117

;; check we have not changed ht
test (hash-size ht) 2
test (hash-fold ht accv 0) 114

;; hash-merge
ht = hash-merge! ht nht
test (hash-size ht) 3
test (hash-fold ht accv 0) 117

;; Other forms of creation:

;; alist->hash
ht = alist->hash '((b & 5) (c & 109))
test (hash-exists? ht 'a) #f
test (hash-exists? ht 'b) #t
test (hash-size ht) 2
test (hash-fold ht accv 0) 114

;; #{ ... }
ht = #{ (b & 5) (c & 109) }
test (hash-exists? ht 'a) #f
test (hash-exists? ht 'b) #t
test (hash-size ht) 2
test (hash-fold ht accv 0) 114

;; equivalence functions

;; default is the C-land equal? and we'll get the symbol back
ht = (make-hash)
test (hash-equivalence-function ht) 'equal?

;; same default if you pass #n
ht = (make-hash #n)
test (hash-equivalence-function ht) 'equal?

;; same default if you pass the symbol 'equal?
ht = (make-hash 'equal?)
test (hash-equivalence-function ht) 'equal?

;; use C-land eq?
ht = (make-hash 'eq?)
test (hash-equivalence-function ht) 'eq?

;; use our own: define an integer comparator
;;
;; Remember the default key is #n so we will be asked to compare #n
;; several times.  Catch those and return #f.
;;
;; Explicitly catch non-integers and raise a continuable
;; ^rt-parameter-type-error -- as the C code for {==} generates
;; non-continuable conditions
ht-integer-eq? := function (k1 k2) {
  cond (((null? k1) or
	 (null? k2)) #f) \
       ((not (integer? k1)) {
	 c := make-condition ^rt-parameter-type-error "not an integer" 'ht-integer-eq? k1
	 raise #t c
       }) \
       ((not (integer? k2)) {
	 c := make-condition ^rt-parameter-type-error "not an integer" 'ht-integer-eq? k2
	 raise #t c
       }) \
       (else (== k1 k2))
}

ht = make-hash ht-integer-eq?
test (hash-equivalence-function ht) ht-integer-eq?

;; make sure it works!
hash-set! ht 1 "apple"
hash-set! ht 2 "banana"
test (hash-size ht) 2
test (hash-exists? ht 1) #t
test (hash-exists? ht 3) #f
test (hash-ref ht 2) "banana"

;; Make sure it fails!  That is to say, check we are actually using
;; it.

;; Here we want to provoke ht-integer-eq? into producing an error, an
;; ^rt-parameter-type-error in particular, because we're trying to
;; insert a character as a key when ht-integer-eq? only works with
;; integers (and #n).

;; We can't guarantee that a given key will collide with any other so
;; we have to loop over a few until one collides -- once we've
;; "collided" with all the default #n keys that exist in a new hash.
done := #f
trap ^rt-parameter-type-error (function (cont cond) {
  if cont {
    ;; NB only increment the test count once as ht-integer-eq? might
    ;; be called several times when a key collides in which case we'll
    ;; get an error riased several times.
    if (not done) (test #t #t)

    ;; set done
    done = #t

    ;; return #f (to ht-integer-eq?, hopefully)
    #f
  } (error "hash equivalence function fail: unexpected non-continuable error" cond) 
}) {
  ;; need plenty of values to provoke a key collision
  loop :+ function (i) {
    c := integer->char i
    hash-set! ht c "carrot"
    if (not done) (loop (i + 1))
  }

  loop 16
}

;; if we copy the hash we should copy the equivalence function

;; NB get a fresh hash (with our equivalence function) as the existing
;; one is full of character keys that generate errors during the copy
ht = make-hash ht-integer-eq?
hash-set! ht 1 "apple"
hash-set! ht 2 "banana"

nht = hash-copy ht
test (hash-equivalence-function nht) ht-integer-eq?

;; hashing functions

;; default is the C-land idio_hash_hashval and we'll get the #n symbol
;; back
ht = (make-hash)
test (hash-hash-function ht) #n

;; same default if you pass #n
ht = (make-hash #n #n)
test (hash-hash-function ht) #n

;; use our own: define a numeric hashing function
;;
;; Explicitly catch non-integers and raise a continuable
;; ^rt-parameter-type-error -- as the C code for {remainder} generates
;; non-continuable ^rt-parameter-type-error conditions
ht-integer-hash := {
  bound := (expt 2 29) - 3

  function (v) {
    if (not (integer? v)) {
      c := make-condition ^rt-parameter-type-error "not an integer" 'ht-integer-hash v

      ;; WARNING: our trap handler (below) will return 0 as the result
      ;; of this {raise}.  Hence we cannot fall through to the call to
      ;; {remainder} as it will still generate a non-cont
      ;; ^rt-parameter-type-error as {v} is unchanged.
      ;;
      ;; This {raise} must be the final clause of ht-integer-hash so
      ;; that it, in turn, returns the 0.
      ;;
      ;;   Or we could assign to {v} or something but at this point we
      ;;   know we've failed (and set {done} in the trap handler) so
      ;;   there's no point in any further calculation.  Return
      ;;   whatever the trap handler gave us and be done with it.
      raise #t c
    } {
      remainder v bound
    }
  }
}

ht = make-hash #n ht-integer-hash
test (hash-hash-function ht) ht-integer-hash

;; make sure it works!
hash-set! ht 1 "apple"
hash-set! ht 2 "banana"
test (hash-size ht) 2
test (hash-exists? ht 1) #t
test (hash-exists? ht 3) #f
test (hash-ref ht 2) "banana"

;; Make sure it fails!  That is to say, check we are actually using
;; it.

;; Here we want to provoke the ht-integer-hash into producing an
;; error, an ^rt-parameter-type-error in particular, because we're
;; trying to insert a character as a key when ht-integer-hash only
;; works with integers.

;; We can't guarantee that a given key will collide with any other so
;; we have to loop over a few until one collides -- once we've
;; "collided" with all the #n keys that exist in a new hash.
done := #f
trap ^rt-parameter-type-error (function (cont cond) {
  if cont {
    ;; NB only increment the test count once as ht-integer-hash might
    ;; be called several times when a key collides in which case we'll
    ;; get an error riased several times.
    if (not done) (test #t #t)

    ;; set done
    done = #t

    ;; return 0 (to ht-integer-hash, which returns it to the internals
    ;; of hash-set!)
    0
  } (error "hash hash function fail: unexpected non-continuable error" cond)
}) {
  ;; need plenty of values to provoke a key collision
  loop :+ function (i) {
    c := integer->char i
    hash-set! ht c "carrot"
    if (not done) (loop (i + 1))
  }

  loop 16
}

;; if we copy the hash we should copy the hash function

;; NB get a fresh hash (with our hash function) as the existing one is
;; full of character keys that generate errors during the copy
ht = make-hash #n ht-integer-hash
hash-set! ht 1 "apple"
hash-set! ht 2 "banana"

nht = hash-copy ht
test (hash-hash-function nht) ht-integer-hash

;; hash index operators
test (ht.1) "apple"
test (ht . 1) "apple"
test (ht. 1) "apple"
test (ht .1) "apple"

b := 2
test (ht.b) "banana"
test (ht.(1 + 1)) "banana"

hash-set! ht 1 #{ ("cat" & 10) ("dog" & 20) }
test (ht.1 ."cat") 10

test (hash-exists? ht.1 "elephant") #f

;; setter
set! ht.2 "carrot"
test (ht.2) "carrot"
ht.4 = "durian"
test (ht.4) "durian"

ht = #{ (1 & "apple") (2 & #{ ("cow" "beef") ("sheep" "lamb")}) }
ht.2 ."pig" = "pork"
test (ht.2 ."pig") "pork"


;; all done?
test (hash0 + 65) Tests

