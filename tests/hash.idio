;;
;; Copyright (c) 2015 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; hash.idio
;;
hash0 = Tests

;; hash operator tests
ht := (make-hash)

test (hash-size ht) 0
test (hash-exists? ht 'a) #f

hash-set! ht 'a 3
test (hash-size ht) 1
test (hash-exists? ht 'a) #t
test (hash-ref ht 'a) 3

monitor (function (cont cond) {
  ;; display* "hash key not found monitor condition:" (struct-type-name cond)
  test (rt-hash-key-not-found? cond) #t
  if cont {
    if (rt-hash-key-not-found? cond) {
      #f
    } (error "hash key not found: unexpected condition" cond)
  } (error "hash key not found: unexpected non-continuable error" cond)
}) {
  test (hash-ref ht 'b) #f
}

default := function () 99

test (hash-ref ht 'b default) 99

hash-set! ht 'b 5
test (hash-ref ht 'b default) 5

add10 := function (v) {
  v + 10
}

hash-update! ht 'a add10
test (hash-ref ht 'a) 13

hash-update! ht 'c add10 default
test (hash-ref ht 'c) 109

hash-delete! ht 'a
test (hash-size ht) 2
test (hash-exists? ht 'a) #f

hash-delete! ht 'd
test (hash-size ht) 2

;; no guaranteed order so can only count
test (length (hash-keys ht)) 2
test (length (hash-values ht)) 2

;; hash-walk
sum := 0
addv := function (k v) {
  sum = sum + v
}

;; we should have b and c in the hash with values 5 and 109
hash-walk ht addv
test sum 114

;; hash-fold
accv := function (k v i) {
  i + v
}

test (hash-fold ht accv 0) 114

;; hash-copy
nht := hash-copy ht

test (hash-size nht) 2
test (hash-fold nht accv 0) 114

hash-set! nht 'a 3
test (hash-size nht) 3
test (hash-fold nht accv 0) 117

;; check we have not changed ht
test (hash-size ht) 2
test (hash-fold ht accv 0) 114

;; hash-merge
ht = hash-merge! ht nht
test (hash-size ht) 3
test (hash-fold ht accv 0) 117

;; all done?
test (hash0 + 26) Tests

