;;
;; Copyright (c) 2015, 2020 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; string-handle.idio
;;
string-handle0 := Tests

;; check predicates fail for non-string-handle
test-str := "foo"
test (string-handle? test-str) #f
test (input-string-handle? test-str) #f
test (output-string-handle? test-str) #f

;; write to a string-handle
osh := (open-output-string)
test (string-handle? osh) #t
test (output-string-handle? osh) #t
test (input-string-handle? osh) #f

sho := "Hello"
write sho osh
close-handle osh

test (string-handle? osh) #t
test (output-string-handle? osh) #t
test (input-string-handle? osh) #f

;; get the text written to the test-str
shis := (get-output-string osh)

; shis = "Hello"; sho = Hello
;test (equal? shis sho) #t

;; use the text read in as (read) will consume the "s
ish := open-input-string shis
test (string-handle? ish) #t
test (input-string-handle? ish) #t
test (output-string-handle? ish) #f

shi := *primitives*/read ish
close-handle ish

test (string-handle? ish) #t
test (input-string-handle? ish) #t
test (output-string-handle? ish) #f

test shi sho

;; use the text read in again
ish := open-input-string shis
test (string-handle? ish) #t
test (input-string-handle? ish) #t
test (output-string-handle? ish) #f

;; seek to the third character of "Hello" , #\e
isn := seek-handle ish 2
test isn 2

shi := read-char ish

test shi #\e
test (peek-char ish) #\l

; default is SEEK_SET
seek-handle ish 2
test (peek-char ish) #\e

seek-handle ish -2 'cur
test (peek-char ish) #\"

seek-handle ish 2 'set
test (peek-char ish) #\e

seek-handle ish -2 'end
test (peek-char ish) #\o

handle-rewind ish
test (peek-char ish) #\"

test (handle-pos ish) 0
seek-handle ish 2
test (handle-pos ish) 2

;; all done?
test (string-handle0 + 29) Tests
