;;
;; Copyright (c) 2015, 2020 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; file-handle.idio
;;
file-handle0 := Tests

test-str := "foo"
test (file-handle? test-str) #f
test (input-file-handle? test-str) #f
test (output-file-handle? test-str) #f

ofh := open-output-file testfile
test (file-handle? ofh) #t
test (output-file-handle? ofh) #t
test (input-file-handle? ofh) #f

fho := "Hello"
write fho ofh
close-handle ofh

test (file-handle? ofh) #t
test (output-file-handle? ofh) #t
test (input-file-handle? ofh) #f

ifh := open-input-file testfile
test (file-handle? ifh) #t
test (input-file-handle? ifh) #t
test (output-file-handle? ifh) #f

fhi := read ifh
close-handle ifh

test (file-handle? ifh) #t
test (input-file-handle? ifh) #t
test (output-file-handle? ifh) #f

test fhi fho

;; use the text read in again
ifh := open-input-file testfile
test (file-handle? ifh) #t
test (input-file-handle? ifh) #t
test (output-file-handle? ifh) #f

;; seek to the third character of "Hello" , #\e
ifn := seek-handle ifh 2
test ifn 2

fhi := read-char ifh

test fhi #\e
test (peek-char ifh) #\l

; default is SEEK_SET
seek-handle ifh 2
test (peek-char ifh) #\e

seek-handle ifh -2 'cur
test (peek-char ifh) #\"

seek-handle ifh 2 'set
test (peek-char ifh) #\e

seek-handle ifh -2 'end
test (peek-char ifh) #\o

handle-rewind ifh
test (peek-char ifh) #\"

test (handle-pos ifh) 0
seek-handle ifh 2
test (handle-pos ifh) 2

;; GC and file handles
;;
;; keep opening a file until we've used up all (per-process) file
;; descriptors -- we can retain the handles in an array.  Then call
;; the GC and then open the file again.
{
  fds := #[ ]
  loop-k := #n
  trap ^system-error (function (cont cond) {
			test (C/== cond.errno (C/integer-> 24)) #t
			if (C/== cond.errno (C/integer-> 24)) {
			  ;display* "test file-handle trap: created" (array-length fds) "fds"
			} {
			  condition-report "test file-handle trap" cont cond (current-error-handle)
			}
			loop-k cond
  }) {
    call/cc (function (k) {
	       loop-k = k
	       loop :+ function () {
			 ish := open-input-file testfile
			 fds =+ ish
			 (loop)
	       }

	       (loop)
    })
  }
}

;; fds is now out of scope and should be collectable thus freeing up
;; all those file descriptors
ifh := open-input-file testfile
test (input-file-handle? ifh) #t

;; all done?
test (file-handle0 + 31) Tests
