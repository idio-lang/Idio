
read-error0 := Tests

;; We have a bunch of test cases which should provoke a ^read-error of
;; some kind.  So we can write a load function which will wrapper the
;; actual load with a trap for ^read-error and compare the message
;; strings.

read-error-load := {
  n := 0

  function (filename msg linenum) {
    if (not (string? filename)) (error 'load "not a string" filename)

    load-k := #n

    n = n + 1
    ;edisplay* "loading #" n filename "looking for" msg "at line" linenum
    trap ^read-error (function (c) {
			;edisplay* n msg c.location c.line
			test c.message msg
			test c.line linenum
			if (or (not (string=? c.message msg))
			       (not (eq? c.line linenum))) {
			  condition-report (append-string "read-error-load: " filename) c (current-error-handle)
			}
			load-k 'read-error
    }) {
      call/cc (function (k) {
		 load-k = k
		 (symbol-value 'load *primitives*) filename
      })
    }
  }
}

;; test the various possible errors in read.c including an embedded
;; variant to check we pick up the correct line number

read-error-load "read-errors/list-eof.idio" "EOF in list" 1
read-error-load "read-errors/list-eof-emb.idio" "EOF in list" 2

read-error-load "read-errors/imp-list-before.idio" "nothing before & in list" 1
read-error-load "read-errors/imp-list-before-emb.idio" "nothing before & in list" 2

read-error-load "read-errors/imp-list-eof-after-sep.idio" "EOF in list" 1
read-error-load "read-errors/imp-list-eof-after-sep-emb.idio" "EOF in list" 2

read-error-load "read-errors/imp-list-nothing-after-sep.idio" "nothing after & in list" 1
read-error-load "read-errors/imp-list-nothing-after-sep-emb.idio" "nothing after & in list" 2

read-error-load "read-errors/imp-list-eof-before-delim.idio" "EOF in list" 1
read-error-load "read-errors/imp-list-eof-before-delim-emb.idio" "EOF in list" 2

read-error-load "read-errors/imp-list-many-after.idio" "more than one expression after & in list" 1
read-error-load "read-errors/imp-list-many-after-emb.idio" "more than one expression after & in list" 2

read-error-load "read-errors/list-op-eof.idio" "EOF in list" 1
;; not sure we should have an embedded variant

read-error-load "read-errors/block-comment-asterisk-initial-eof.idio" "comment: unterminated" 4
read-error-load "read-errors/block-comment-asterisk-eof.idio" "comment: unterminated" 2

read-error-load "read-errors/nested-block-comment-asterisk-initial-eof.idio" "comment: unterminated" 2
read-error-load "read-errors/nested-block-comment-asterisk-eof-1.idio" "comment: unterminated" 2
read-error-load "read-errors/nested-block-comment-asterisk-eof-2.idio" "comment: unterminated" 2

read-error-load "read-errors/block-comment-pipe-initial-eof.idio" "comment: unterminated" 4
read-error-load "read-errors/block-comment-pipe-eof.idio" "comment: unterminated" 2

read-error-load "read-errors/nested-block-comment-pipe-initial-eof.idio" "comment: unterminated" 2
read-error-load "read-errors/nested-block-comment-pipe-eof-1.idio" "comment: unterminated" 2
read-error-load "read-errors/nested-block-comment-pipe-eof-2.idio" "comment: unterminated" 2

read-error-load "read-errors/string-unterminated.idio" "string: unterminated" 1
read-error-load "read-errors/string-unterminated-emb.idio" "string: unterminated" 2

read-error-load "read-errors/character-eof.idio" "UTF-8 decode: EOF" 1
read-error-load "read-errors/named-character-eof.idio" "named character: EOF" 1
read-error-load "read-errors/named-character-eof-emb.idio" "named character: EOF" 2

read-error-load "read-errors/named-character-unknown.idio" "unknown named character: caveat" 2
read-error-load "read-errors/named-character-unknown-emb.idio" "unknown named character: caveat" 3

read-error-load "read-errors/template-too-many-ic.idio" "template: too many interpolation characters: #5: $ (0x24)" 1
read-error-load "read-errors/template-too-many-ic-emb.idio" "template: too many interpolation characters: #5: $ (0x24)" 2

read-error-load "read-errors/template-eof.idio" "template: EOF" 1
read-error-load "read-errors/template-eof-emb.idio" "template: EOF" 2

;; Can only test template delimiters if IDIO_OPEN_DELIMITER () doesn't
;; match the case entries in idio_read_template()

;read-error-load "read-errors/template-delimiter.idio" "template: unexpected delimiter: ) (0xdd)"

read-error-load "read-errors/pathname-too-many-ic.idio" "pathname: too many interpolation characters: #5: $ (0x24)" 1
read-error-load "read-errors/pathname-too-many-ic-emb.idio" "pathname: too many interpolation characters: #5: $ (0x24)" 2

read-error-load "read-errors/pathname-eof.idio" "pathname: EOF" 1
read-error-load "read-errors/pathname-eof-emb.idio" "pathname: EOF" 2

;; Can't test bignum radix without changing the parser to allow
;; non-canonical radices, #A1, say

;read-error-load "read-errors/bignum-radix.idio" "bignum: base #%c (%d) > max base %d"

read-error-load "read-errors/bignum-invalid-digit.idio" "bignum: invalid digit a in bignum base #d" 2
read-error-load "read-errors/bignum-invalid-digit-emb.idio" "bignum: invalid digit a in bignum base #d" 3

read-error-load "read-errors/bignum-no-digits.idio" "bignum: no digits after bignum base #d" 1
read-error-load "read-errors/bignum-no-digits-emb.idio" "bignum: no digits after bignum base #d" 2

read-error-load "read-errors/word-too-long.idio" "word is too long: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaFAI'" 11
read-error-load "read-errors/word-too-long-emb.idio" "word is too long: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaFAI'" 12

read-error-load "read-errors/unexpected-rparen.idio" "unexpected ')'" 1
read-error-load "read-errors/unexpected-rparen-emb.idio" "unexpected ')'" 2

read-error-load "read-errors/unexpected-rbrace.idio" "unexpected '}'" 1

;; A nominal unexpected rbrace will just close any outstanding lbrace
;; or otherwise be at the "top level" and therefore no different to
;; the simplest case above.  However, we can embed the rbrace inside
;; another form of list construction, here, an array construction, to
;; trigger the error.
read-error-load "read-errors/unexpected-rbrace-emb.idio" "unexpected '}'" 4

read-error-load "read-errors/unexpected-rbracket.idio" "unexpected ']'" 1
read-error-load "read-errors/unexpected-rbracket-emb.idio" "unexpected ']'" 2

read-error-load "read-errors/exact-expected-number.idio" "number expected after #e: got SYMBOL" 1
read-error-load "read-errors/exact-expected-number-emb.idio" "number expected after #e: got SYMBOL" 2

read-error-load "read-errors/inexact-expected-number.idio" "number expected after #i: got SYMBOL" 1
read-error-load "read-errors/inexact-expected-number-emb.idio" "number expected after #i: got SYMBOL" 2

read-error-load "read-errors/not-ready-for-hash-format.idio" "not ready for # format: < (3c)" 1
read-error-load "read-errors/not-ready-for-hash-format-emb.idio" "not ready for # format: < (3c)" 2

read-error-load "read-errors/unexpected-hash-format.idio" "unexpected # format: '^' (0x5e)" 1
read-error-load "read-errors/unexpected-hash-format-emb.idio" "unexpected # format: '^' (0x5e)" 2

read-error-load "read-errors/unexpected-pair-separator.idio" "unexpected & outside of list" 1

;; XXX in both of these the trailing newlines in the file affect the
;; line number!
read-error-load "read-errors/op-eof.idio" "EOF in list" 3
read-error-load "read-errors/op-eof-emb.idio" "EOF in list" 4

;; all done?
test Tests (read-error0 + 122)
