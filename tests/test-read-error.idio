
read-error0 := Tests

;; We have a bunch of test cases which should provoke a ^read-error or
;; ^string-error of some kind.  So we can write a load function which
;; will wrapper the actual load with a trap for (^read-error
;; ^string-error) and compare the message strings (and line numbers
;; for ^read-errors).

;; So one or two tests per, uh, test.

read-error-load := {
  n := 0

  function (filename msg linenum) {
    if (not (string? filename)) (error 'load "not a string" filename)

    load-k := #n

    n = n + 1
    ;edisplay* "loading #" n filename "looking for" msg "at line" linenum
    trap (^read-error ^string-error) (function (c) {
					;edisplay* n msg c.location c.line
					test c.message msg

					isa-read-error := read-error? c

					if isa-read-error (test c.line linenum)

					if (or (not (string=? c.message msg))
					       (and isa-read-error
						    (not (eq? c.line linenum)))) {
						      condition-report (append-string "read-error-load: " filename) c (current-error-handle)
						    }
					load-k 'read-error
    }) {
      call/cc (function (k) {
		 load-k = k
		 (symbol-value 'load 'Idio) filename
      })
    }
  }
}

;; test the various possible errors in read.c including an embedded
;; variant to check we pick up the correct line number

read-error-load "read-errors/list-eof.idio" "EOF in list" 1
read-error-load "read-errors/list-eof-emb.idio" "EOF in list" 2

read-error-load "read-errors/imp-list-before.idio" "nothing before & in list" 1
read-error-load "read-errors/imp-list-before-emb.idio" "nothing before & in list" 2

read-error-load "read-errors/imp-list-eof-after-sep.idio" "EOF in list" 1
read-error-load "read-errors/imp-list-eof-after-sep-emb.idio" "EOF in list" 2

read-error-load "read-errors/imp-list-nothing-after-sep.idio" "nothing after & in list" 1
read-error-load "read-errors/imp-list-nothing-after-sep-emb.idio" "nothing after & in list" 2

read-error-load "read-errors/imp-list-eof-before-delim.idio" "EOF in list" 1
read-error-load "read-errors/imp-list-eof-before-delim-emb.idio" "EOF in list" 2

read-error-load "read-errors/imp-list-many-after.idio" "more than one expression after & in list" 1
read-error-load "read-errors/imp-list-many-after-emb.idio" "more than one expression after & in list" 2

read-error-load "read-errors/list-op-eof.idio" "EOF in list" 1
;; not sure we should have an embedded variant

read-error-load "read-errors/block-comment-asterisk-initial-eof.idio" "comment: unterminated" 4
read-error-load "read-errors/block-comment-asterisk-eof.idio" "comment: unterminated" 2

read-error-load "read-errors/nested-block-comment-asterisk-initial-eof.idio" "comment: unterminated" 2
read-error-load "read-errors/nested-block-comment-asterisk-eof-1.idio" "comment: unterminated" 2
read-error-load "read-errors/nested-block-comment-asterisk-eof-2.idio" "comment: unterminated" 2

read-error-load "read-errors/block-comment-pipe-initial-eof.idio" "comment: unterminated" 4
read-error-load "read-errors/block-comment-pipe-eof.idio" "comment: unterminated" 2

read-error-load "read-errors/nested-block-comment-pipe-initial-eof.idio" "comment: unterminated" 2
read-error-load "read-errors/nested-block-comment-pipe-eof-1.idio" "comment: unterminated" 2
read-error-load "read-errors/nested-block-comment-pipe-eof-2.idio" "comment: unterminated" 2

read-error-load "read-errors/string-eof.idio" "string: EOF" 1
read-error-load "read-errors/string-eof-emb.idio" "string: EOF" 2
read-error-load "read-errors/string-invalid-utf8.idio" "string UTF-8 decode: not well-formed" 1

read-error-load "read-errors/character-eof.idio" "UTF-8 decode: EOF" 1
read-error-load "read-errors/character-incomplete-eof.idio" "UTF-8 decode: EOF" 1
read-error-load "read-errors/character-invalid-utf8.idio" "UTF-8 decode: not well-formed" 1
read-error-load "read-errors/named-character-eof.idio" "named character: EOF" 1
read-error-load "read-errors/named-character-eof-emb.idio" "named character: EOF" 2
read-error-load "read-errors/named-character-non-ASCII.idio" "named character: non-ASCII" 3
read-error-load "read-errors/named-character-no-name.idio" "named character: no letters in character name?" 1

read-error-load "read-errors/named-character-unknown.idio" "unknown named character: caveat" 2
read-error-load "read-errors/named-character-unknown-emb.idio" "unknown named character: caveat" 3

read-error-load "read-errors/template-too-many-ic.idio" "template: too many interpolation characters: #5: $ (0x24)" 1
read-error-load "read-errors/template-too-many-ic-emb.idio" "template: too many interpolation characters: #5: $ (0x24)" 2

read-error-load "read-errors/template-eof.idio" "template: EOF" 1
read-error-load "read-errors/template-eof-emb.idio" "template: EOF" 2

;; Can only test template delimiters if IDIO_OPEN_DELIMITER () doesn't
;; match the case entries in idio_read_template()

;read-error-load "read-errors/template-delimiter.idio" "template: unexpected delimiter: ) (0xdd)"

read-error-load "read-errors/pathname-too-many-ic.idio" "pathname: too many interpolation characters: #5: $ (0x24)" 1
read-error-load "read-errors/pathname-too-many-ic-emb.idio" "pathname: too many interpolation characters: #5: $ (0x24)" 2

read-error-load "read-errors/pathname-eof.idio" "pathname: EOF" 1
read-error-load "read-errors/pathname-eof-emb.idio" "pathname: EOF" 2

;; Can't test bignum radix without changing the parser to allow
;; non-canonical radices, #A1, say

;read-error-load "read-errors/bignum-radix.idio" "bignum: base #%c (%d) > max base %d"

read-error-load "read-errors/bignum-invalid-digit.idio" "bignum: invalid digit 'a' in bignum base #d" 2
read-error-load "read-errors/bignum-invalid-digit-emb.idio" "bignum: invalid digit 'a' in bignum base #d" 3

read-error-load "read-errors/bignum-no-digits.idio" "bignum: no digits after bignum base #d" 1
read-error-load "read-errors/bignum-no-digits-emb.idio" "bignum: no digits after bignum base #d" 2

read-error-load "read-errors/read-number-radix-too-small.idio" "bignum: radix 1 < 2" 1
read-error-load "read-errors/read-number-radix-too-big.idio" "bignum: base #? (99) > max base 36" 1

read-error-load "read-errors/word-too-long.idio" "word is too long: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaFAI'" 11
read-error-load "read-errors/word-too-long-emb.idio" "word is too long: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaFAI'" 12

read-error-load "read-errors/interpc-quasiquote-eof.idio" "EOF in quasiquote" 1
read-error-load "read-errors/interpc-escape-eof.idio" "EOF in escape" 1

read-error-load "read-errors/word-escape-eof.idio" "EOF in escaped word" 1

read-error-load "read-errors/unexpected-rparen.idio" "unexpected ')'" 1
read-error-load "read-errors/unexpected-rparen-emb.idio" "unexpected ')'" 2

read-error-load "read-errors/unexpected-rbrace.idio" "unexpected '}'" 1

;; A nominal unexpected rbrace will just close any outstanding lbrace
;; or otherwise be at the "top level" and therefore no different to
;; the simplest case above.  However, we can embed the rbrace inside
;; another form of list construction, here, an array construction, to
;; trigger the error.
read-error-load "read-errors/unexpected-rbrace-emb.idio" "unexpected '}'" 4

read-error-load "read-errors/unexpected-rbracket.idio" "unexpected ']'" 1
read-error-load "read-errors/unexpected-rbracket-emb.idio" "unexpected ']'" 2

read-error-load "read-errors/hash-format-eof.idio" "#-format EOF" 1

read-error-load "read-errors/exact-expected-number.idio" "number expected after #e: got SYMBOL" 1
read-error-load "read-errors/exact-expected-number-emb.idio" "number expected after #e: got SYMBOL" 2

read-error-load "read-errors/inexact-expected-number.idio" "number expected after #i: got SYMBOL" 1
read-error-load "read-errors/inexact-expected-number-emb.idio" "number expected after #i: got SYMBOL" 2

read-error-load "read-errors/not-ready-for-hash-format.idio" "not ready for '#<' format" 1
read-error-load "read-errors/not-ready-for-hash-format-emb.idio" "not ready for '#<' format" 2

read-error-load "read-errors/unexpected-hash-format.idio" "unexpected '#^' format (# then 0x5e)" 1
read-error-load "read-errors/unexpected-hash-format-emb.idio" "unexpected '#^' format (# then 0x5e)" 2

read-error-load "read-errors/unexpected-pair-separator.idio" "unexpected & outside of list" 1

read-error-load "read-errors/bitset-eof.idio" "bitset: EOF" 1
read-error-load "read-errors/bitset-internal-eof-1.idio" "bitset: EOF" 1
read-error-load "read-errors/bitset-internal-eof-2.idio" "bitset: EOF" 1
read-error-load "read-errors/bitset-not-lbrace.idio" "bitset: not a {" 1
read-error-load "read-errors/bitset-word-too-long.idio" "word is too long
read-error-load "read-errors/bitset-size-floating-point.idio" "bitset: size must be a positive decimal integer" 1
read-error-load "read-errors/bitset-size-non-integer.idio" "bitset: size must be a positive decimal integer" 1
read-error-load "read-errors/bitset-size-negative.idio" "bitset: size must be a positive decimal integer" 1
read-error-load "read-errors/bitset-size-negative-bignum.idio" "bitset: size must be a positive decimal integer" 1

read-error-load "read-errors/bitset-range-start-floating-point.idio" "bitset: range start 0x1 from \"1.1\"" 1
read-error-load "read-errors/bitset-range-start-non-integer.idio" "bignum: no digits after bignum base #x" 1
read-error-load "read-errors/bitset-range-start-too-big.idio" "bitset: range start 0x10 > bitset size 0x3" 1
if (gt FIXNUM-MAX 536870911) {
  read-error-load "read-errors/bitset-range-start-too-big-bignum.idio" "bitset: range start 0x2000000000000000 > bitset size 0x3" 1
} {
  read-error-load "read-errors/bitset-range-start-too-big-bignum.idio" "bitset: range start 0x20000000 > bitset size 0x3" 1
}
read-error-load "read-errors/bitset-range-start-non-byte-boundary.idio" "bitset: range start 0x1 is not a byte boundary" 1
read-error-load "read-errors/bitset-range-start-negative.idio" "bitset: range start must be a positive base-16 integer" 1
read-error-load "read-errors/bitset-range-start-negative-bignum.idio" "bitset: range start must be a positive base-16 integer" 1

read-error-load "read-errors/bitset-range-end-floating-point.idio" "bitset: range end 0x2 from \"2.1\"" 1
read-error-load "read-errors/bitset-range-start-non-integer.idio" "bignum: no digits after bignum base #x" 1
read-error-load "read-errors/bitset-range-end-too-big.idio" "bitset: range end 0x20 > bitset size 0x3" 1
if (gt FIXNUM-MAX 536870911) {
  read-error-load "read-errors/bitset-range-end-too-big-bignum.idio" "bitset: range end 0x2000000000000000 > bitset size 0x3" 1
} {
  read-error-load "read-errors/bitset-range-end-too-big-bignum.idio" "bitset: range end 0x20000000 > bitset size 0x3" 1
}
read-error-load "read-errors/bitset-range-end-non-byte-boundary.idio" "bitset: range end 0x2 is not a byte boundary" 1
read-error-load "read-errors/bitset-range-start-greater-end.idio" "bitset: range start 0x10 > range end 0" 1
read-error-load "read-errors/bitset-range-end-negative.idio" "bignum: invalid digit '-' in bignum base #x" 1

read-error-load "read-errors/bitset-offset-non-integer.idio" "bignum: no digits after bignum base #x" 1
read-error-load "read-errors/bitset-offset-too-big.idio" "bitset: offset 0x10 > bitset size 0x3" 1
if (gt FIXNUM-MAX 536870911) {
  read-error-load "read-errors/bitset-offset-too-big-bignum.idio" "bitset: offset 0x2000000000000000 > bitset size 0x3" 1
} {
  read-error-load "read-errors/bitset-offset-too-big-bignum.idio" "bitset: offset 0x20000000 > bitset size 0x3" 1
}
read-error-load "read-errors/bitset-offset-non-byte-boundary.idio" "bitset: offset 0x1 is not a byte boundary" 1
read-error-load "read-errors/bitset-offset-negative.idio" "bitset: offset must be a positive base-16 integer" 1
read-error-load "read-errors/bitset-offset-negative-bignum.idio" "bitset: offset must be a positive base-16 integer" 1
read-error-load "read-errors/bitset-offset-too-many-bits-in-block.idio" "bitset: bitset bits should be fewer than 8" 1
read-error-load "read-errors/bitset-offset-too-many-bits.idio" "bitset: offset 0 + 8 bits > bitset size 0x3" 1
read-error-load "read-errors/bitset-offset-bad-bits.idio" "bitset: bits should be 0/1, not 0x32 @2" 1

read-error-load "read-errors/unicode-eof.idio" "U+hhhh decode: EOF" 1
read-error-load "read-errors/unicode-not-plus.idio" "U+hhhh decode: U not followed by +" 1
read-error-load "read-errors/unicode-negative.idio" "U+hhhh decode: code point too big" 1
read-error-load "read-errors/unicode-too-big.idio" "U+hhhh decode: code point too big" 1
read-error-load "read-errors/unicode-too-big-bignum.idio" "U+hhhh decode: code point too big" 9

;; XXX in both of these the trailing newlines in the file affect the
;; line number!
read-error-load "read-errors/op-eof.idio" "EOF in list" 3
read-error-load "read-errors/op-eof-emb.idio" "EOF in list" 4

;; all done?
test Tests (read-error0 + 214)
